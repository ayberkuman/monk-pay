[{"/Users/erdincmaden/Documents/Other/monk-medical-web/src/index.js":"1","/Users/erdincmaden/Documents/Other/monk-medical-web/src/ErrorBoundary.js":"2","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App.js":"3","/Users/erdincmaden/Documents/Other/monk-medical-web/src/store.js":"4","/Users/erdincmaden/Documents/Other/monk-medical-web/src/rootReducer.js":"5","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/Layout.js":"6","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/Router.js":"7","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/appActions.js":"8","/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/LanguageFiles.js":"9","/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/API.js":"10","/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/helper.js":"11","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/authActions.js":"12","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/components/Alert.js":"13","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/appReducer.js":"14","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/routes.js":"15","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/authReducer.js":"16","/Users/erdincmaden/Documents/Other/monk-medical-web/src/NotFound/NotFound.js":"17","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/Layout/Header.js":"18","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/pages/ForgotPassword.js":"19","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Home/Home.js":"20","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/Layout/components/UserArea.js":"21","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/pages/Login.js":"22","/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/components/InputWLabel.js":"23","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/pages/components/LeftSide.js":"24","/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/components/CutomCheckbox.js":"25","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Payments/Payments.js":"26","/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/components/SelectWLabel.js":"27","/Users/erdincmaden/Documents/Other/monk-medical-web/src/UserDetail/UserDetail.js":"28","/Users/erdincmaden/Documents/Other/monk-medical-web/src/CreatePatient/CreatePatient.js":"29","/Users/erdincmaden/Documents/Other/monk-medical-web/src/CreatePaid/CreatePaid.js":"30","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Expense/Expense.js":"31","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Analysis/Analysis.js":"32"},{"size":1005,"mtime":1614350364607,"results":"33","hashOfConfig":"34"},{"size":426,"mtime":1610034889211,"results":"35","hashOfConfig":"34"},{"size":5402,"mtime":1618913114447,"results":"36","hashOfConfig":"34"},{"size":323,"mtime":1610041609860,"results":"37","hashOfConfig":"34"},{"size":405,"mtime":1610035483102,"results":"38","hashOfConfig":"34"},{"size":5469,"mtime":1618912659508,"results":"39","hashOfConfig":"34"},{"size":3801,"mtime":1613148741355,"results":"40","hashOfConfig":"34"},{"size":450,"mtime":1611258433029,"results":"41","hashOfConfig":"34"},{"size":453,"mtime":1610223382980,"results":"42","hashOfConfig":"34"},{"size":239,"mtime":1611514312488,"results":"43","hashOfConfig":"34"},{"size":1882,"mtime":1614088119168,"results":"44","hashOfConfig":"34"},{"size":234,"mtime":1611939413748,"results":"45","hashOfConfig":"34"},{"size":3167,"mtime":1610035823406,"results":"46","hashOfConfig":"34"},{"size":1046,"mtime":1610818349425,"results":"47","hashOfConfig":"34"},{"size":3181,"mtime":1612004381643,"results":"48","hashOfConfig":"34"},{"size":995,"mtime":1613148715447,"results":"49","hashOfConfig":"34"},{"size":1386,"mtime":1610221638095,"results":"50","hashOfConfig":"34"},{"size":2343,"mtime":1612125635330,"results":"51","hashOfConfig":"34"},{"size":4731,"mtime":1613064725014,"results":"52","hashOfConfig":"34"},{"size":9623,"mtime":1615824693124,"results":"53","hashOfConfig":"34"},{"size":1108,"mtime":1611939329525,"results":"54","hashOfConfig":"34"},{"size":6283,"mtime":1614087224313,"results":"55","hashOfConfig":"34"},{"size":3922,"mtime":1617112885161,"results":"56","hashOfConfig":"34"},{"size":932,"mtime":1616783887022,"results":"57","hashOfConfig":"34"},{"size":785,"mtime":1610558021800,"results":"58","hashOfConfig":"34"},{"size":8543,"mtime":1614781390299,"results":"59","hashOfConfig":"34"},{"size":2265,"mtime":1611485974193,"results":"60","hashOfConfig":"34"},{"size":12081,"mtime":1614777568599,"results":"61","hashOfConfig":"34"},{"size":7057,"mtime":1614773376838,"results":"62","hashOfConfig":"34"},{"size":22538,"mtime":1617122613050,"results":"63","hashOfConfig":"34"},{"size":13907,"mtime":1617439584599,"results":"64","hashOfConfig":"34"},{"size":6104,"mtime":1613150058679,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1748078",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"68"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"68"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"68"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"68"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"68"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"68"},"/Users/erdincmaden/Documents/Other/monk-medical-web/src/index.js",[],["142","143"],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/ErrorBoundary.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/App.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/store.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/rootReducer.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/Layout.js",["144","145","146"],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/Router.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/appActions.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/LanguageFiles.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/API.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/helper.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/authActions.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/components/Alert.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/appReducer.js",["147"],"import { alert } from \"./appActions\";\n\nconst initState = {\n  alert: {\n    type: \"\",\n    content: \"\",\n    timeout: 0,\n    isActive: false,\n  },\n  connection: \"\",\n  pageLoading: false,\n  headerTitle: ''\n};\n\nconst appReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"ALERT\": {\n      const alert = {\n        type: action.alertType,\n        title: action.title,\n        content: action.content,\n        timeout: action.timeout,\n        isActive: true,\n      };\n\n      const app = { ...state, alert };\n\n      return { ...app };\n    }\n\n    case \"RESET_ALERT\": {\n      const alert = {\n        type: \"\",\n        title: \"\",\n        content: \"\",\n        timeout: 0,\n        isActive: false,\n      };\n\n      const app = { ...state, alert };\n\n      return { ...app };\n    }\n\n    case 'PAGE_LOADING': {\n      return { ...state, pageLoading: action.pageLoading } \n    }\n\n    case 'HEADER_TITLE': {\n      return { ...state, headerTitle: action.headerTitle } \n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default appReducer;\n","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/routes.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/authReducer.js",[],["148","149"],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/NotFound/NotFound.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/Layout/Header.js",["150"],"import React, { Component, createRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport avatar from '../../assets/images/avatar.svg'\nimport { logout, update } from \"../../Auth/authActions\";\nimport {\n  authRoutes,\n  globalRoutes,\n  guestRoutes,\n} from \"../routes\";\nimport { UserArea } from \"./components/UserArea\";\n\nconst allRoutes = {\n  ...globalRoutes,\n  ...guestRoutes,\n  ...authRoutes,\n};\n\nclass Header extends Component {\n  state = {\n    isProfilePopupOn: false,\n  };\n\n  profilePopupRef = createRef();\n\n  showProfilePopup = (e) => {\n    e.preventDefault();\n\n    this.setState(\n      (prevState) => {\n        return { isProfilePopupOn: !prevState.isProfilePopupOn };\n      },\n      () => {\n        document.addEventListener(\"click\", this.closeProfilePopup, false);\n      }\n    );\n  };\n\n  closeProfilePopup = (e) => {\n    if (e.target !== this.profilePopupRef.current) {\n      this.setState({ isProfilePopupOn: false }, () => {\n        document.removeEventListener(\"click\", this.closeProfilePopup, false);\n      });\n    }\n  };\n\n  render() {\n    return this.props.user.isLoggedIn ? (\n      <div\n        className=\"header\"\n        data-alt={\n          this.props.location.pathname !==\n          guestRoutes.login.links[this.props.lang]\n        }\n      >\n        <div className=\"row\">\n          <div className=\"col-6 d-flex align-items-center\">\n            <p className='m-0'>{this.props.headerTitle}</p>\n          </div>\n          <div className=\"col-6 d-flex justify-content-end align-items-center\">\n            <span className=\"d-none d-md-flex\">\n              <UserArea\n                user={this.props.user}\n                isProfilePopupOn={this.state.isProfilePopupOn}\n                showProfilePopup={this.showProfilePopup}\n                logout={this.props.logout}\n                profilePopupRef={this.profilePopupRef}\n                lang={this.props.lang}\n                update={this.props.update}\n                avatar={avatar}\n              />\n            </span>\n          </div>\n        </div>\n      </div>\n    ) : (\n      <div></div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    logout: () => dispatch(logout()),\n    update: (user) => dispatch(update(user)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(withRouter(Header));\n","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/pages/ForgotPassword.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/Home/Home.js",["151","152","153"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Bar } from '@reactchartjs/react-chart.js'\nimport { Link } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { formatMoney, scrollToTop } from \"../utils/helper\";\nimport API, { headers } from \"../utils/API\";\nimport { headerTitleSet } from \"../App/appActions\";\nimport { authRoutes } from \"../App/routes\"\n\nexport class Home extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      startDate: '',\n      endDate:'',\n      graphStartDate:moment().subtract(1, 'months').format('YYYY-MM-DD'),\n      balanceList:[],\n      creditTotal:null,\n      debtTotal: null,\n      processCount: 0,\n      list: [],\n      barFilter: 'day',\n      graphType: 0,\n      data: {\n        labels: [],\n        datasets: [{\n          type: 'line',\n          label: ' ',\n          borderColor: '#FDC132',\n          borderWidth: 2,\n          fill: false,\n          data: [],\n        },\n        {\n          type: 'bar',\n          label: ' ',\n          backgroundColor: '#38C976',\n          data: [],\n          borderColor: 'white',\n          borderWidth: 0,\n        }],\n      },\n    }\n  }\n  componentDidMount = () => {\n    setTimeout(() => {\n      this.props.headerTitleSet(this.props.translate('home'));\n    }, 400);\n    this.getData()\n    scrollToTop();\n  };\n\n  getData = () => {\n    this.props.pageLoadingSet(true);\n    const startDate = this.state.startDate !== '' ? moment(this.state.startDate).format('YYYY-MM-DD') : ''\n    const endDate = this.state.endDate !== '' ? moment(this.state.endDate).format('YYYY-MM-DD') : ''\n    const graphStartDate = this.state.graphStartDate !== '' ? moment(this.state.graphStartDate).format('YYYY-MM-DD') : ''\n    API.get(`Dashboard/Home?startDate=${startDate}&endDate=${endDate}&graphStartDate=${graphStartDate}&graphType=${this.state.graphType}`, { headers: { ...headers, Authorization: `Bearer ${this.props.user.token}` }})\n        .then((res) => {\n          const {balanceList, creditTotal, debtTotal, list, processCount} = res.data;\n            const labels= [];\n            const lineData= []\n            const barData= []\n          balanceList.forEach((e, i) => {\n            labels.push(e.date);\n            lineData.push(e.amount)\n            barData.push(e.amount)\n          });\n          this.setState({\n            balanceList, \n            creditTotal, \n            debtTotal, \n            list,\n            processCount,\n            data: {\n              labels,\n              datasets: [{\n                type: 'line',\n                label: ' ',\n                borderColor: '#FDC132',\n                borderWidth: 2,\n                fill: false,\n                data: lineData,\n              },\n              {\n                type: 'bar',\n                label: ' ',\n                backgroundColor: '#38C976',\n                data: barData,\n                borderColor: 'white',\n                borderWidth: 0,\n              }],\n            }\n          });\n          this.props.pageLoadingSet(false);\n        })\n        .catch((err) => {\n          // alert(err.response.data.value)\n          this.props.pageLoadingSet(false);\n        });\n  }\n\n  setDate(date, type){\n    if(type === 'start'){\n      this.setState({\n        startDate: date\n      }, ()=>{\n        this.state.endDate !== '' && this.state.startDate !== '' && this.getData()\n      })\n    } else{\n      this.setState({\n        endDate: date\n      },()=>{\n        this.state.endDate !== '' && this.state.startDate !== '' && this.getData()\n      })\n    }\n  }\n  barFilter(e){\n    let date = '';\n    let graphType = 0;\n    if (e === 'day') {\n      date = moment().subtract(7, 'day').format('YYYY-MM-DD')\n      graphType = 0;\n    } else if(e === 'mounth'){\n      date = moment().subtract(1, 'months').format('YYYY-MM-DD')\n      graphType = 10;\n    } else if(e==='year'){\n      date = moment().subtract(1, 'years').format('YYYY-MM-DD')\n      graphType = 20;\n    }\n    console.log(date);\n    this.setState({\n      barFilter: e,\n      graphStartDate: date,\n      graphType\n    },()=>{\n      this.getData()\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"Home\">\n        <div className=\"align-items-center justify-content-between mt-4 mb-4\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <Link\n                className=\"primary-button d-inline-flex\"\n                to={authRoutes.createPatient.links[this.props.lang]}\n              >\n                Hasta Kaydı Oluştur\n              </Link>\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-6 mb-4\">\n            <div className=\"border p-3 rounded h-100\">\n              <div className=\"d-flex justify-content-between align-items-center\">\n                <h3>Tahsil Edilen</h3>\n                <div className=\"bar-filter\">\n                  <a\n                    className={this.state.barFilter === 'day' ? 'active' : ''}\n                    alt=\"D\"\n                    onClick={() => {\n                      this.barFilter('day')\n                    }}\n                  >\n                    D\n                  </a>\n                  <a\n                    className={this.state.barFilter === 'mounth' ? 'active' : ''}\n                    alt=\"M\"\n                    onClick={() => {\n                      this.barFilter('mounth')\n                    }}\n                  >\n                    M\n                  </a>\n                  <a\n                    className={this.state.barFilter === 'year' ? 'active' : ''}\n                    alt=\"Y\"\n                    onClick={() => {\n                      this.barFilter('year')\n                    }}\n                  >\n                    Y\n                  </a>\n                </div>\n              </div>\n              <Bar \n                data={this.state.data} \n                options={{\n                  cornerRadius: 10,\n                  legend: { display: false },\n                  scales: {\n                    xAxes: [\n                      {\n                        barThickness: 7,\n                        display: true,\n                        gridLines: {\n                          display: false,\n                        },\n                        ticks: {\n                          autoSkip: false,\n                        },\n                        stacked: true,\n                      },\n                    ],\n                    yAxes: [{\n                      stacked: true,\n                      ticks:{\n                        min: 0,\n                      }\n                    },\n                    ],\n                  },\n                }}\n    \n              />\n            </div>\n          </div>\n          <div className=\"col-md-6 mb-4\">\n            <div className=\"row h-100\">\n              <div className=\"col-12 mb-4\">\n                <div className=\"border rounded pl-3 pr-3 pt-4 pb-4\">\n                  <div className=\"pb-3 mb-4 border-bottom\">\n                    <div className=\"col-md-12\">\n                      <div className=\"row\">\n                        <div className=\"col-6\">\n                          <DatePicker\n                            selected={this.state.startDate}\n                            onChange={(date) => this.setDate(date, \"start\")}\n                            placeholderText=\"Başlangıç Tarihi\"\n                            className=\"w-100 min\"\n                          />\n                        </div>\n                        <div className=\"col-6\">\n                          <DatePicker\n                            selected={this.state.endDate}\n                            className=\"w-100 min\"\n                            onChange={(date) => this.setDate(date, \"end\")}\n                            placeholderText=\"Bitiş Tarihi\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"row h-100 align-items-center\">\n                    <div className=\"col-6 text-center\">\n                      <p className=\"fs-24 mb-2\">{this.state.processCount}</p>\n                      <p className=\"mb-0\">Tedavi Sayısı</p>\n                    </div>\n                    <div className=\"col-6 text-center\">\n                      <p className=\"fs-24 mb-2\">{formatMoney(this.state.debtTotal)} TL</p>\n                      <p className=\"mb-0\">Toplam Alacak</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"col-12 d-flex flex-column justify-content-end\">\n                <div className=\"border rounded pl-3 pr-3 pt-4 pb-4 h-100\">\n                  <h3 className=\"border-bottom pb-3 mb-0\">Açık Bakiye</h3>\n                  <div className=\"row h-100 align-items-center\">\n                    <div className=\"col-12 text-center\">\n                      <p className=\"fs-24 mb-2\">\n                      {formatMoney(this.state.debtTotal - this.state.creditTotal)} TL\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.auth.user,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    headerTitleSet: (text) => dispatch(headerTitleSet(text)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/Layout/components/UserArea.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/pages/Login.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/components/InputWLabel.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/pages/components/LeftSide.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/components/CutomCheckbox.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/Payments/Payments.js",["154"],"import React, { Component } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Link } from \"react-router-dom\";\nimport { authRoutes } from \"../App/routes\";\nimport API, { headers } from \"../utils/API\";\nimport InputWLabel from \"../utils/components/InputWLabel\";\nimport { currency, formatMoney, scrollToTop } from \"../utils/helper\";\n\nexport class Payments extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      rows: [],\n      hasMore: false, \n      length: 10,\n      currentpage: 1,\n      search: ''\n    }\n  }\n\n  \n  componentDidMount = () => {\n    scrollToTop();\n    setTimeout(() => {\n      this.props.headerTitleSet(this.props.translate('payments'));\n    }, 400);\n    this.getData()\n  };\n\n  getData = ()=>{\n    if (this.state.search === '') {\n      // this.props.pageLoadingSet(true)\n    }\n    API.get(`Payment/ListByPassion?searchBy=${this.state.search}&currentpage=${this.state.currentpage}`, {\n      headers: { ...headers, Authorization: `Bearer ${this.props.user.token}`, page: this.state.currentpage},\n    })\n      .then((res) => {\n        // this.props.pageLoadingSet(false);\n        const { data } = res;\n        const rows = this.state.rows;\n        data.data.map(e => {\n          rows.push({\n            id: e.user.id,\n            fullName: e.user.fullName,\n            totalBalance: e.totalBalance,\n            totalCredit: e.totalCredit,\n            totalDebt: e.totalDebt,\n            currency: currency(e.currency),\n          });\n        });\n        this.setState({\n          currentpage: this.state.currentpage+1,\n          rows: rows,\n          hasMore: data.totalPages >= this.state.currentpage+1\n        })\n\n      })\n      .catch((err) => {\n        // alert(err.response.data.value)\n        // this.props.pageLoadingSet(false);\n      });\n  }\n\n  timeout = '';\n  handleChange = (e) => {\n    const { value } = e.target;\n    clearTimeout(this.timeout);\n    \n      this.setState(\n        {\n          rows: [],\n          search: value,\n          currentpage: 1,\n        },\n        () => {\n          this.timeout = setTimeout(() => {\n            this.getData();\n          }, 500);\n        }\n      );\n    \n  };\n  render() {\n    return (\n      <div className=\"Payments\">\n        <div className=\"align-items-center justify-content-between mt-4 mb-4\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <Link\n                className=\"primary-button d-inline-flex\"\n                to={authRoutes.createPatient.links[this.props.lang]}\n              >\n                Hasta Kaydı Oluştur\n              </Link>\n            </div>\n            <div className=\"col-md-6 d-flex justify-content-end\">\n              <InputWLabel\n                name=\"search\"\n                type=\"searchT\"\n                classes=\"mb-0 mw-400 w-100\"\n                id=\"search\"\n                value={this.state.search}\n                setValue={this.handleChange}\n                tabIndex={1}\n                label=\"\"\n                placeholder=\"Hasta Adı\"\n                icon={\n                  <svg\n                    width=\"20\"\n                    height=\"20\"\n                    viewBox=\"0 0 20 20\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      d=\"M19.6672 18.1075L14.7625 13.1963C17.2288 9.98675 16.9826 5.34958 14.0229 2.41441C12.4065 0.796245 10.3234 0 8.21364 0C6.10387 0 4.02067 0.795147 2.40443 2.41441C-0.801477 5.62392 -0.801477 10.8364 2.40443 14.0459C4.02078 15.6641 6.10387 16.4603 8.21364 16.4603C9.96701 16.4603 11.7215 15.9116 13.1742 14.7864L18.1057 19.671C18.3251 19.8907 18.5991 20 18.8999 20C19.174 20 19.4758 19.8907 19.6942 19.671C20.1063 19.2595 20.1063 18.5458 19.6674 18.1075H19.6672ZM8.24028 14.2387C6.62393 14.2387 5.14344 13.6075 3.99278 12.4834C1.6635 10.1515 1.6635 6.33874 3.99278 3.97886C5.11675 2.85363 6.62393 2.22353 8.24028 2.22353C9.85663 2.22353 11.3371 2.85473 12.4878 3.97886C13.6385 5.1041 14.2412 6.61297 14.2412 8.23114C14.2412 9.84931 13.6107 11.3315 12.4878 12.4834C11.3638 13.6354 9.82989 14.2387 8.24028 14.2387Z\"\n                      fill=\"#474555\"\n                    />\n                  </svg>\n                }\n              />\n            </div>\n          </div>\n        </div>\n        <div>\n          <InfiniteScroll\n            dataLength={this.state.rows.length}\n            next={this.getData}\n            hasMore={this.state.hasMore}\n            loader={\n              <tr>\n                <td>...</td>\n              </tr>\n            }\n            height={600}\n            endMessage={\n              <p style={{ textAlign: \"center\" }}>\n                {/*<b>Yay! You have seen it all</b>*/}\n              </p>\n            }\n          >\n            <div className=\"react-infinite-table react-infinite-table-fill example-table\">\n              <table className=\"table table-bordered table-striped\">\n                <thead>\n                  <tr>\n                    <th className=\"react-infinite-table-col-0\">Hasta Adı</th>\n                    <th className=\"react-infinite-table-col-1\">\n                      Fatura Tutarı\n                    </th>\n                    <th className=\"react-infinite-table-col-2\">\n                      Tahsil Edilmiş\n                    </th>\n                    <th className=\"react-infinite-table-col-3\">Açık Bakiye</th>\n                    <th className=\"react-infinite-table-col-4\"></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.rows.map((i, index) => (\n                    <tr key={index + \"a\"}>\n                      <td className=\"react-infinite-table-col-0\">\n                        <Link\n                          className='d-block'\n                          to={authRoutes.userDetail.links[\n                            this.props.lang\n                          ].replace(\":id\", i.id)}\n                        >\n                          {i.fullName}\n                        </Link>\n                      </td>\n                      <td className=\"react-infinite-table-col-1\">\n                        <Link\n                          className='d-block'\n                          to={authRoutes.userDetail.links[\n                            this.props.lang\n                          ].replace(\":id\", i.id)}\n                        >\n                          {formatMoney(i.totalDebt)}\n                        </Link>\n                      </td>\n                      <td className=\"react-infinite-table-col-2\">\n                        <Link\n                          className='d-block'\n                          to={authRoutes.userDetail.links[\n                            this.props.lang\n                          ].replace(\":id\", i.id)}\n                        >\n                          {formatMoney(i.totalCredit)}\n                        </Link>\n                      </td>\n                      <td className=\"react-infinite-table-col-3\">\n                        <Link\n                          className='d-block'\n                          to={authRoutes.userDetail.links[\n                            this.props.lang\n                          ].replace(\":id\", i.id)}\n                        >\n                          {formatMoney(i.totalBalance)}\n                        </Link>\n                      </td>\n                      <td className=\"react-infinite-table-col-4 text-right\">\n                        <div className='d-flex justify-content-end'>\n                          <Link\n                            className=\"primary-button md d-inline-flex min-110 mr-2\"\n                            to={authRoutes.addTreatment.links[\n                              this.props.lang\n                            ].replace(\":id\", i.id)}\n                          >\n                            Tedavi Ekle\n                          </Link>\n                          <Link\n                            className=\"primary-button md d-inline-flex min-110\"\n                            to={authRoutes.addPaid.links[\n                              this.props.lang\n                            ].replace(\":id\", i.id)}\n                          >\n                            Ödeme Al\n                          </Link>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </InfiniteScroll>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Payments\n","/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/components/SelectWLabel.js",["155"],"import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport crypto from \"crypto\";\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport { validateInput } from \"../helper\";\n\nexport default class SelectWLabel extends Component {\n  state = {\n    isFilled: false,\n    isActive: false,\n  };\n\n  id = crypto.randomBytes(6).toString(\"hex\");\n\n  componentDidMount = () => {\n    if (this.props.value) this.setState({ isFilled: true }, this.handleFocus);\n  };\n\n  componentDidUpdate = (prevProps) => {\n    if (!prevProps.value && this.props.value && !this.state.isFilled)\n      this.setState({ isFilled: true }, this.handleFocus);\n  };\n\n  handleFocus = () =>\n    document.getElementById(`input-${this.id}`).classList.add(\"focused\");\n\n  handleBlur = (e) => {\n    if (this.props.validate)\n      if (!validateInput(this.props.type, e.target.value)) {\n        e.target.value = \"\";\n        this.props.setValue(e);\n      }\n\n    if (e.target.value === \"\" || e.target.value === \"empty-placeholder-value\")\n      document.getElementById(`input-${this.id}`).classList.remove(\"focused\");\n  };\n\n  render() {\n    return (\n      <div\n        className={`SelectWLabel position-relative d-flex justify-content-start align-items-center ${\n          this.props.classes ? this.props.classes : ``\n        } ${this.props.errorMessage !=='' ? 'error':''}`}\n        id={`input-${this.id}`}\n        data-move-label={this.state.isFilled || this.state.isActive}\n        data-w-icon={\"icon\" in this.props}\n        data-label={this.props.label}\n        data-error={Boolean(this.props.errorMessage)}\n        data-error-message={`* ${this.props.errorMessage}`}\n      >\n        {this.props.icon ? (\n          <div className=\"icon d-flex justify-content-center align-items-center\">\n            {this.props.icon}\n          </div>\n        ) : (\n          \"\"\n        )}\n        <Typeahead\n          id={this.props.id}\n          onChange={this.props.setValue}\n          options={this.props.options}\n          placeholder={this.props.placeholder}\n          selected={this.props.value}\n          value={this.props.value}\n        />\n        <label className='position-absolute'>{this.props.label}</label>\n      </div>\n    );\n  }\n}\n","/Users/erdincmaden/Documents/Other/monk-medical-web/src/UserDetail/UserDetail.js",["156"],"import _ from \"lodash\";\nimport React, { Component } from \"react\";\nimport { Dropdown } from \"react-bootstrap\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Link } from \"react-router-dom\";\nimport { authRoutes } from \"../App/routes\";\nimport deleteIcon from '../assets/images/delete-icon.svg';\nimport editIcon from '../assets/images/edit-icon.svg';\nimport API, { headers } from \"../utils/API\";\nimport { formatMoney, scrollToTop } from \"../utils/helper\";\n\nexport class UserDetail extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      name: '',\n      tckn: '',\n      passionNo: '',\n      phone: '',\n      email: '',\n      balance: '',\n      yapilanIslemler: [],\n      yapilanIslemlerToplam: 0,\n      islemGecmisi:[],\n      islemGecmisiToplam: 0,\n      hasMore1: false,\n      hasMore2: false, \n      length1: 10,\n      length2: 10,\n      currentpage1: 1,\n      currentpage2: 1,\n    }\n  }\n  componentDidMount = () => {\n    scrollToTop();\n\n    this.getData()\n  }\n  getData = ()=>{\n    if (\n      this.props.match.params.id !== \"\" &&\n      !_.isUndefined(this.props.match.params.id)\n    ) {\n      this.props.pageLoadingSet(true);\n\n      API.get(`Account/GetById?id=${this.props.match.params.id}`, {\n        headers: {\n          ...headers,\n          Authorization: `Bearer ${this.props.user.token}`,\n        },\n      })\n        .then((res) => {\n          const { user } = res.data;\n          this.setState({\n            name: user.fullName,\n            tckn: user.identityNumber,\n            passionNo: user.id,\n            phone: user.phoneNumber,\n            email: user.email,\n          });\n          this.props.pageLoadingSet(false);\n        })\n        .catch((err) => {\n          // alert(err.response.data.value)\n          this.props.pageLoadingSet(false);\n        });\n\n      API.get(`Dashboard/Home?passionId=${this.props.match.params.id}`, {\n        headers: {\n          ...headers,\n          Authorization: `Bearer ${this.props.user.token}`,\n        },\n      })\n        .then((res) => {\n          const { creditTotal, debtTotal, list } = res.data;\n          const yapilanIslemler = [];\n          let yapilanIslemlerToplam = 0;\n          const islemGecmisi = [];\n          let islemGecmisiToplam = 0;\n          list.map((e) => {\n            if (e.paymentType === 0) {\n              islemGecmisi.push({\n                description: e.description,\n                price: e.amount,\n                doctorId: e.doctorId,\n                userId: e.userId,\n                id: e.id,\n              });\n              islemGecmisiToplam = islemGecmisiToplam + e.amount;\n            } else{\n              yapilanIslemler.push({\n                description: e.description,\n                price: e.amount,\n                doctorId: e.doctorId,\n                userId: e.userId,\n                id: e.id,\n              });\n              yapilanIslemlerToplam = yapilanIslemlerToplam + e.amount;\n            }\n          });\n          this.setState({\n            balance: debtTotal - creditTotal,\n            islemGecmisi,\n            islemGecmisiToplam: debtTotal,\n            yapilanIslemler,\n            yapilanIslemlerToplam:creditTotal,\n          });\n          this.props.pageLoadingSet(false);\n        })\n        .catch((err) => {\n          // alert(err.response.data.value)\n          this.props.pageLoadingSet(false);\n        });\n    }\n  }\n\n  payDelete = (id) => {\n    this.props.pageLoadingSet(true);\n    API.delete(`Payment?paymentId=${id}`, {\n      headers: {\n        ...headers,\n        Authorization: `Bearer ${this.props.user.token}`,\n      },\n    })\n      .then((res) => {\n        this.getData()\n        this.props.pageLoadingSet(false);\n      })\n      .catch((err) => {\n        this.props.pageLoadingSet(false);\n      });\n  }\n    \n  render() {\n    return (\n      <div className=\"Payments\">\n        <div className=\"row pt-4\">\n          <div className=\"col-md-4 mb-4\">\n            <div className=\"border-radius border rounded\">\n              <div className=\"card-title\">Hasta Kartı</div>\n              <div className=\"card-body\">\n                <p>\n                  {this.state.name}\n                  <br />\n                  T.C. : {this.state.tckn}\n                </p>\n                <p>\n                  Hasta No:\n                  <br />\n                  {this.state.passionNo}\n                </p>\n                <p>\n                  Telefon:\n                  <br /> {this.state.phone}\n                </p>\n                <p>\n                  E-posta:\n                  <br />\n                  {this.state.email}\n                </p>\n                <div className=\"card-balance\">\n                  <p className=\"text-white p-0 m-0 font-weight-bold fs-16\">\n                    {formatMoney(this.state.balance) + ' TL'}\n                  </p>\n                  <span className=\"text-white fs-12\">Bakiye</span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-4 mb-4\">\n            <InfiniteScroll\n              dataLength={this.state.islemGecmisi.length}\n              next={this.getData}\n              hasMore={this.state.hasMore1}\n              loader={\n                <tr>\n                  <td>...</td>\n                </tr>\n              }\n              height={385}\n              endMessage={\n                <p style={{ textAlign: \"center\" }}>\n                  {/*<b>Yay! You have seen it all</b>*/}\n                </p>\n              }\n            >\n              <div className=\"react-infinite-table react-infinite-table-fill example-table\">\n                <table className=\"table table-bordered table-striped\">\n                  <thead>\n                    <tr>\n                      <th className=\"react-infinite-table-col-0\">\n                        Yapılan İşlemler\n                      </th>\n                      <th className=\"react-infinite-table-col-1 text-right\">\n                        Toplam : {formatMoney(this.state.islemGecmisiToplam)} TL\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.islemGecmisi.map((i, index) => (\n                      <tr key={index + \"a\"}>\n                        <td className=\"react-infinite-table-col-0\">\n                          {i.description}\n                        </td>\n                        <td\n                          className=\"react-infinite-table-col-1\"\n                          align=\"right\"\n                        >\n                          {formatMoney(i.price)} TL\n                          <Dropdown className=\"float-right dropdown-min\">\n                            <Dropdown.Toggle></Dropdown.Toggle>\n                            <Dropdown.Menu>\n                              <Dropdown.Item\n                                onClick={() =>\n                                  this.props.history.push(\n                                    authRoutes.editPaid.links[this.props.lang]\n                                      .replace(\n                                        \":id\",\n                                        this.props.match.params.id\n                                      )\n                                      .replace(\":paid\", i.id)\n                                  )\n                                }\n                              >\n                                <img src={editIcon} alt=\"\" className=\"mr-2\" />{\" \"}\n                                Düzenle\n                              </Dropdown.Item>\n                              <Dropdown.Item\n                                onClick={() => {\n                                  this.payDelete(i.id);\n                                }}\n                              >\n                                <img src={deleteIcon} alt=\"\" className=\"mr-2\" />{\" \"}\n                                Sil\n                              </Dropdown.Item>\n                            </Dropdown.Menu>\n                          </Dropdown>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </InfiniteScroll>\n            <Link\n              className=\"primary-button d-inline-flex mt-3\"\n              to={authRoutes.addTreatment.links[this.props.lang].replace(\n                \":id\",\n                this.props.match.params.id\n              )}\n            >\n              Tedavi Ekle\n            </Link>\n          </div>\n          <div className=\"col-md-4 mb-4\">\n            <InfiniteScroll\n              dataLength={this.state.yapilanIslemler.length}\n              next={this.getData}\n              hasMore={this.state.hasMore2}\n              loader={\n                <tr>\n                  <td>...</td>\n                </tr>\n              }\n              height={385}\n              endMessage={\n                <p style={{ textAlign: \"center\" }}>\n                  {/*<b>Yay! You have seen it all</b>*/}\n                </p>\n              }\n            >\n              <div className=\"react-infinite-table react-infinite-table-fill example-table\">\n                <table className=\"table table-bordered table-striped\">\n                  <thead>\n                    <tr>\n                      <th className=\"react-infinite-table-col-0\">\n                        Ödeme Geçmisi\n                      </th>\n                      <th className=\"react-infinite-table-col-1 text-right\">\n                        Toplam : {formatMoney(this.state.yapilanIslemlerToplam)} TL\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.yapilanIslemler.map((i, index) => (\n                      <tr key={index + \"a\"}>\n                        <td className=\"react-infinite-table-col-0\">\n                          {i.description}\n                        </td>\n                        <td\n                          className=\"react-infinite-table-col-1\"\n                          align=\"right\"\n                        >\n                          {formatMoney(i.price)} TL\n                          <Dropdown className=\"float-right dropdown-min\">\n                            <Dropdown.Toggle></Dropdown.Toggle>\n                            <Dropdown.Menu>\n                              <Dropdown.Item\n                                onClick={() =>\n                                  this.props.history.push(\n                                    authRoutes.editPaid.links[this.props.lang]\n                                      .replace(\n                                        \":id\",\n                                        this.props.match.params.id\n                                      )\n                                      .replace(\":paid\", i.id)\n                                  )\n                                }\n                              >\n                                <img src={editIcon} alt=\"\" className=\"mr-2\" />{\" \"}\n                                Düzenle\n                              </Dropdown.Item>\n                              <Dropdown.Item\n                                onClick={() => {\n                                  this.payDelete(i.id);\n                                }}\n                              >\n                                <img src={deleteIcon} alt=\"\" className=\"mr-2\" />{\" \"}\n                                Sil\n                              </Dropdown.Item>\n                            </Dropdown.Menu>\n                          </Dropdown>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </InfiniteScroll>\n            <Link\n              className=\"primary-button d-inline-flex mt-3\"\n              to={authRoutes.addPaid.links[this.props.lang].replace(\n                \":id\",\n                this.props.match.params.id\n              )}\n            >\n              Ödeme Al\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserDetail\n","/Users/erdincmaden/Documents/Other/monk-medical-web/src/CreatePatient/CreatePatient.js",["157","158","159"],"import React, { Component } from \"react\";\nimport InputWLabel from \"../utils/components/InputWLabel\";\nimport { scrollToTop } from \"../utils/helper\";\nimport API, { headers } from \"../utils/API\";\nimport { authRoutes } from \"../App/routes\";\nimport { validateInput } from \"../utils/helper\";\nexport class CreatePatient extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      tckn: '',\n      firstName: '',\n      lastName: '',\n      eMail: '',\n      phoneNumber: '',\n      address: '',\n      tcknError: '',\n      firstError: '',\n      lastError: '',\n      eMailError: '',\n      phoneNumberError: '',\n      addressError: '',\n    }\n  }\n\n  componentDidMount = () => {\n    scrollToTop();\n    setTimeout(() => {\n      this.props.headerTitleSet(this.props.translate('payments'));\n    }, 400);\n  }\n\n  componentWillUnmount () {\n    clearTimeout(this._loadRowsTimeout)\n  }\n\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    if (name === 'phoneNumber') {\n      var val = value.replace(/^[\\d\\(\\)\\+]+$/m,\"\");\n      if (val === '') {\n        this.setState({ [name]: value }, () => {\n          setTimeout(this.handleCheck, 20);\n        }); \n      }\n    } else{\n      this.setState({ [name]: value }, () => {\n        setTimeout(this.handleCheck, 20);\n      });\n    }\n  };\n\n\n  handleCheck = () => {\n  };\n  postData = (redirect) =>{\n    const { tckn, firstName, lastName, eMail, phoneNumber, address} = this.state;\n    this.setState({\n      tcknError: tckn === '' ? 'Geçerli bir TCKN numarası giriniz' : '',\n      firstNameError: firstName === '' ? 'Lütfen adınızı giriniz' : '',\n      lastNameError: lastName === '' ? 'Lütfen soyadınızı giriniz' : '',\n      eMailError: !validateInput('email', eMail) ? 'Geçerli bir e-posta adresi giriniz' : '',\n      phoneNumberError: !validateInput('tel', phoneNumber) ? 'Geçerli bir telefon numarası giriniz' : '',\n      addressError: address === '' ? 'Lütfen adresinizi giriniz' : '',\n    },() => {\n      const { tcknError, firstNameError, lastNameError,  eMailError, phoneNumberError, addressError } = this.state;\n      if (\n        tcknError === \"\" &&\n        firstNameError === \"\" &&\n        lastNameError === \"\" &&\n        eMailError === \"\" &&\n        phoneNumberError === \"\" &&\n        addressError === \"\"\n      ) {\n        this.props.pageLoadingSet(true);\n        const data = {\n          user: {\n            identityNumber: tckn,\n            email: eMail,\n            phoneNumber: phoneNumber,\n            firstName,\n            lastName,\n            address: address,\n          },\n        };\n  \n        API.post(\"/Account/Addpassion\", data, {\n          headers: {\n            ...headers,\n            Authorization: `Bearer ${this.props.user.token}`,\n          },\n        })\n          .then((res) => {\n            this.props.pageLoadingSet(false);\n            if (redirect === \"pay\") {\n              this.props.history.push(authRoutes.addTreatment.links[this.props.lang].replace(\":id\", res.data.id));\n            }\n            else{\n              this.props.history.push(authRoutes.payments.links[this.props.lang]);\n            }\n          })\n          .catch((err) => {\n            this.props.pageLoadingSet(false);\n          });\n      }\n    })\n   \n  }\n  save = ()=>{\n    this.postData();\n  }\n  saveAndPay = ()=>{\n    this.postData('pay');\n  }\n  render() {\n    return (\n      <div className=\"Payments\">\n        <div className=\"align-items-center justify-content-between mt-4 mb-4\">\n          <div className=\"row\">\n            <div className=\"col-md-12 mb-2\">\n              <h1>Kayıt Oluşturma</h1>\n            </div>\n          </div>\n        </div>\n        <div className=\"row mt-3\">\n          <div className=\"col-md-4 mt-2\">\n            <InputWLabel\n            classes='mt-3'\n              type=\"text\"\n              name=\"tckn\"\n              id=\"tckn\"\n              label=\"Kimlik Numarası\"\n              placeholder=\"Kimlik Numarası\"\n              value={this.state.tckn}\n              setValue={this.handleChange}\n              inputRef={this.tcknRef}\n              tabIndex={1}\n              errorMessage={this.state.tcknError}\n            />\n          </div>\n          <div className=\"col-md-4 mt-2\">\n            <InputWLabel\n              classes='mt-3'\n              type=\"text\"\n              name=\"firstName\"\n              id=\"firstName\"\n              label=\"Ad\"\n              placeholder=\"Ad\"\n              value={this.state.firstName}\n              setValue={this.handleChange}\n              inputRef={this.firstNameRef}\n              tabIndex={1}\n              errorMessage={this.state.firstNameError}\n            />\n          </div>\n          <div className=\"col-md-4 mt-2\">\n            <InputWLabel\n              classes='mt-3'\n              type=\"text\"\n              name=\"lastName\"\n              id=\"lastName\"\n              label=\"Soyad\"\n              placeholder=\"Soyad\"\n              value={this.state.lastName}\n              setValue={this.handleChange}\n              inputRef={this.lastNameRef}\n              tabIndex={1}\n              errorMessage={this.state.lastNameError}\n            />\n          </div>\n          <div className=\"col-md-4 mt-2\">\n            <InputWLabel\n              classes='mt-3'\n              type=\"email\"\n              name=\"eMail\"\n              id=\"eMail\"\n              label=\"E-posta\"\n              placeholder=\"E-posta\"\n              value={this.state.eMail}\n              setValue={this.handleChange}\n              inputRef={this.eMailRef}\n              tabIndex={1}\n              errorMessage={this.state.eMailError}\n            />\n          </div>\n          <div className=\"col-md-4 mt-2\">\n            <InputWLabel\n              classes='mt-3'\n              type=\"phone\"\n              name=\"phoneNumber\"\n              id=\"phoneNumber\"\n              label=\"Telefon\"\n              placeholder=\"Telefon\"\n              value={this.state.phoneNumber}\n              setValue={this.handleChange}\n              inputRef={this.phoneNumberRef}\n              tabIndex={1}\n              errorMessage={this.state.phoneNumberError}\n            />\n          </div>\n          <div className=\"col-md-8 mt-2\">\n            <InputWLabel\n              classes='mt-3'\n              type=\"text\"\n              name=\"address\"\n              id=\"address\"\n              label=\"Adres\"\n              placeholder=\"Adres\"\n              value={this.state.address}\n              setValue={this.handleChange}\n              inputRef={this.addressRef}\n              tabIndex={1}\n              errorMessage={this.state.addressError}\n            />\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-md-12'>\n            <button className=\"primary-button d-inline-flex\"\n            onClick={()=>this.save()}>\n              Kayıt Al\n            </button>\n            <button className=\"primary-white-button d-inline-flex ml-4\"\n            onClick={()=>this.saveAndPay()}>\n              Kayıt Al ve Ödeme Al\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CreatePatient\n","/Users/erdincmaden/Documents/Other/monk-medical-web/src/CreatePaid/CreatePaid.js",["160","161"],"import _ from 'lodash';\nimport moment from \"moment\";\nimport React, { Component } from \"react\";\nimport { alert } from \"../App/appActions\";\nimport { authRoutes } from \"../App/routes\";\nimport API, { headers } from \"../utils/API\";\nimport InputWLabel from \"../utils/components/InputWLabel\";\nimport SelectWLabel from \"../utils/components/SelectWLabel\";\nimport { formatMoney, scrollToTop } from \"../utils/helper\";\nexport class CreatePaid extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      processList: [],\n      doctorList: [],\n      selectedProcess:[],\n      selectedDoctor:[],\n      total: '',\n      totalError: '',\n      selectedProcessError: '',\n      selectedDoctorError: '',\n      discountNumber:'',\n      discountResult: '',\n      alinanMiktar:'',\n      alinanMiktarView: false,\n      balance: 0,\n      discountType: 'rate',\n      editable: true,\n    }\n  }\n\n  componentDidMount = () => {\n    scrollToTop();\n    setTimeout(() => {\n      this.props.headerTitleSet(this.props.translate('payments'));\n    }, 400);\n    this.getData();\n    if (this.props.match.url === authRoutes.addPaid.links[this.props.lang].replace(\n      \":id\",\n      this.props.match.params.id\n    )) {\n      this.setState({alinanMiktarView: true})\n    }\n  }\n\n  componentWillUnmount () {\n    clearTimeout(this._loadRowsTimeout)\n  }\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    \n    this.setState({ [name]: value }, () => {\n      if (name === 'discountNumber' || name === 'total') {\n        if (this.state.total !== \"\" || this.state.discountNumber !== \"\") {\n          if (this.state.discountType === 'rate') {\n            if (\n              Number(this.state.total) >=\n              Number(this.state.total) * Number(this.state.discountNumber / 100)\n            ) {\n              this.setState({\n                discountResult:\n                  Number(this.state.total) -\n                  Number(this.state.total) *\n                    Number(this.state.discountNumber / 100),\n              });\n            } else {\n              this.setState({\n                discountNumber: \"\",\n              });\n            }\n          } else{\n            console.log(Number(this.state.total) - Number(this.state.discountNumber))\n            if (\n              Number(this.state.total) - Number(this.state.discountNumber) >=\n              0\n            ) {\n              this.setState({\n                discountResult:\n                  Number(this.state.total) - Number(this.state.discountNumber),\n              });\n            } else {\n              this.setState({\n                discountNumber: \"\",\n              });\n            }\n          }\n        } else {\n          this.setState({\n            discountResult: \"\",\n          });\n        }\n      }\n    });\n  };\n  getData = ()=>{\n    API.get(`Diagnose/ListPrice?length=1000`, {\n      headers: {\n        ...headers,\n        Authorization: `Bearer ${this.props.user.token}`,\n      },\n    }).then((res) => {\n      const processList = [];\n      res.data.data.map((e)=>{\n        processList.push({\n          id: e.diagnose.id,\n          label: e.diagnose.name,\n          price: e.price,\n        })\n      })\n      this.setState({\n        processList,\n      },()=>{\n        if (\n          this.props.match.params.paid !== \"\" &&\n          !_.isUndefined(this.props.match.params.paid)\n        ) {\n          this.editOnly()\n        }\n      });\n      \n      this.props.pageLoadingSet(false);\n    })\n    .catch((err) => {\n      // alert(err.response.data.value)\n      this.props.pageLoadingSet(false);\n    });\n    API.get(`Account/ListAllDoctors?length=1000`, {\n      headers: {\n        ...headers,\n        Authorization: `Bearer ${this.props.user.token}`,\n      },\n    }).then((res) => {\n      const doctorList = [];\n      res.data.data.map((e)=>{\n        doctorList.push({\n          id: e.user.id,\n          label: e.user.fullName,\n        })\n      })\n      this.setState({\n        doctorList\n      })\n      this.props.pageLoadingSet(false);\n    })\n    .catch((err) => {\n      // alert(err.response.data.value)\n      this.props.pageLoadingSet(false);\n    });\n\n    if (\n      this.props.match.params.id !== \"\" &&\n      !_.isUndefined(this.props.match.params.id)\n    ) {\n      this.props.pageLoadingSet(true);\n\n      API.get(`Account/GetById?id=${this.props.match.params.id}`, {\n        headers: {\n          ...headers,\n          Authorization: `Bearer ${this.props.user.token}`,\n        },\n      })\n        .then((res) => {\n          const { user } = res.data;\n          this.setState({\n            name: user.fullName,\n            tckn: user.identityNumber,\n            passionNo: user.id,\n            phone: user.phoneNumber,\n            email: user.email,\n          });\n          this.props.pageLoadingSet(false);\n        })\n        .catch((err) => {\n          // alert(err.response.data.value)\n          this.props.pageLoadingSet(false);\n        });\n      API.get(`Dashboard/Home?passionId=${this.props.match.params.id}`, {\n        headers: {\n          ...headers,\n          Authorization: `Bearer ${this.props.user.token}`,\n        },\n      })\n        .then((res) => {\n          const { creditTotal, debtTotal } = res.data;\n          this.setState({\n            balance: debtTotal - creditTotal,\n          });\n          this.props.pageLoadingSet(false);\n        })\n        .catch((err) => {\n          this.props.pageLoadingSet(false);\n        });\n    }\n    \n  }\n  search = (nameKey, myArray) => {\n    for (var i=0; i < myArray.length; i++) {\n        if (myArray[i].id === nameKey) {\n            return myArray[i];\n        }\n    }\n}\n\n  editOnly = () => {\n    this.props.pageLoadingSet(true);\n      API.get(`Payment/GetById?id=${this.props.match.params.paid}`, {\n        headers: {\n          ...headers,\n          Authorization: `Bearer ${this.props.user.token}`,\n        },\n      })\n        .then((res) => {\n          const process = this.search(res.data.processId, this.state.processList);\n\n          this.setState({\n            total: res.data.price,\n            discountNumber:res.data.discountRate === 0 ? res.data.price - res.data.amount > 0 ? res.data.price - res.data.amount : '' : res.data.discountRate,\n            discountResult: res.data.price === res.data.amount ? '' : res.data.amount,\n            alinanMiktar:res.data.amount,\n            alinanMiktarView:  false,\n            selectedProcess:[process],\n            selectedDoctor:[{id:res.data.doctor.id, label:res.data.doctor.fullName}],\n            discountType: res.data.discountRate>0 ? 'rate' : 'amount'\n          })\n          this.props.pageLoadingSet(false);\n        })\n        .catch((err) => {\n          this.props.pageLoadingSet(false);\n        });\n  }\n\n  postData = (q, r) =>{\n    const {total, discountNumber, selectedProcess, selectedDoctor, alinanMiktar, discountType} = this.state;\n    this.setState(\n      {\n        totalError: total === ''\n          ? \"Toplam fatura tutarını giriniz\"\n          : \"\",\n        selectedProcessError: selectedProcess.length === 0 ? \"Lütfen tedavi adını giriniz\" : '',\n        selectedDoctorError: selectedDoctor.length === 0 ? \"Lütfen doktor adını giriniz\" : '',\n      },\n      () => {\n        const {totalError, selectedProcessError, selectedDoctorError} = this.state;\n        if (q !== \"miktar\") {\n          if (\n            totalError === \"\" &&\n            selectedProcessError === \"\" &&\n            selectedDoctorError === \"\"\n          ) {\n            const data = {\n              userId: this.props.match.params.id,\n              price: parseFloat(total),\n              discountRate:\n                discountNumber === \"\" || discountType !== 'rate' ? 0 : parseFloat(discountNumber),\n              amount: discountNumber === \"\" || discountType === 'rate' ? 0 : parseFloat(discountNumber),\n              createDate: moment().format(\"YYYY-MM-DD\"),\n              processId: parseInt(selectedProcess[0].id),\n              paymentType: 0,\n              doctorId: selectedDoctor[0].id,\n            };\n\n            if (this.props.match.params.paid !== \"\" && !_.isUndefined(this.props.match.params.paid)) {\n              data.id = parseInt(this.props.match.params.paid)\n            }\n            this.props.pageLoadingSet(true);\n            API.post(\"Payment\", data, {\n              headers: {\n                ...headers,\n                Authorization: `Bearer ${this.props.user.token}`,\n              },\n            })\n              .then((res) => {\n                this.props.pageLoadingSet(false);\n                if (r === \"next\") {\n                  this.setState({\n                    alinanMiktarView: true,\n                  });\n                } else {\n                  this.props.history.push(\n                    authRoutes.userDetail.links[this.props.lang].replace(\n                      \":id\",\n                      this.props.match.params.id\n                    )\n                  );\n                }\n              })\n              .catch((err) => {\n                this.props.pageLoadingSet(false);\n                this.setState({ isSending: false });\n              });\n          }\n         } else {\n            const data = {\n              userId: this.props.match.params.id,\n              price: parseFloat(alinanMiktar),\n              discountRate: 0,\n              createDate: moment().format(\"YYYY-MM-DD\"),\n              processId: 0,\n              paymentType: 10,\n              doctorId: \"\",\n              description: \"Ödeme alındı\",\n            };\n            this.props.pageLoadingSet(true);\n            API.post(\"Payment\", data, {\n              headers: {\n                ...headers,\n                Authorization: `Bearer ${this.props.user.token}`,\n              },\n            })\n              .then((res) => {\n                alert(12312);\n                this.props.pageLoadingSet(false);\n                this.props.history.push(\n                  authRoutes.userDetail.links[this.props.lang].replace(\n                    \":id\",\n                    this.props.match.params.id\n                  )\n                );\n              })\n              .catch((err) => {\n                this.props.pageLoadingSet(false);\n                this.setState({ isSending: false });\n              });\n          }\n        }\n    );\n  }\n  save = (redirect)=>{\n    this.postData('save', redirect);\n  }\n  saveAndFatura = ()=>{\n    this.postData('miktar', '');\n  }\n  discountTypeChange = (discountType)=>{\n    this.setState({\n      discountType \n    },()=>{\n      if (this.state.total !== \"\" || this.state.discountNumber !== \"\") {\n        if (this.state.discountType === 'rate') {\n          if (\n            Number(this.state.total) >=\n            Number(this.state.total) * Number(this.state.discountNumber / 100)\n          ) {\n            this.setState({\n              discountResult:\n                Number(this.state.total) -\n                Number(this.state.total) *\n                  Number(this.state.discountNumber / 100),\n            });\n          } else {\n            this.setState({\n              discountNumber: \"\",\n            });\n          }\n        } else{\n          console.log(Number(this.state.total) - Number(this.state.discountNumber))\n          if (\n            Number(this.state.total) - Number(this.state.discountNumber) >=\n            0\n          ) {\n            this.setState({\n              discountResult:\n                Number(this.state.total) - Number(this.state.discountNumber),\n            });\n          } else {\n            this.setState({\n              discountNumber: \"\",\n            });\n          }\n        }\n      } else {\n        this.setState({\n          discountResult: \"\",\n        });\n      }\n    });\n  }\n  render() {\n    return (\n      <div className=\"Payments\">\n        <div className=\"row  mt-5\">\n          <div className=\"col-md-4 mb-4\">\n            <div className=\"border-radius border rounded\">\n              <div className=\"card-title\">Hasta Kartı</div>\n              <div className=\"card-body\">\n                <p>\n                  {this.state.name}\n                  <br />\n                  T.C. : {this.state.tckn}\n                </p>\n                <p>\n                  Hasta No:\n                  <br />\n                  {this.state.passionNo}\n                </p>\n                <p>\n                  Telefon:\n                  <br /> {this.state.phone}\n                </p>\n                <p>\n                  E-posta:\n                  <br />\n                  {this.state.email}\n                </p>\n                <div className=\"card-balance mt-5\">\n                  <p className=\"text-white p-0 m-0 font-weight-bold fs-16\">\n                    {formatMoney(this.state.balance) + \" TL\"}\n                  </p>\n                  <span className=\"text-white fs-12\">Bakiye</span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-8 mb-4\">\n            {!this.state.alinanMiktarView && (\n              <div className=\"row\">\n                <div className=\"col-md-12\">\n                  <div className=\"row\">\n                    <div className=\"col-md-6 mt-2\">\n                      <div className=\"top-item select-box\">\n                        <SelectWLabel\n                          name=\"selectedProcess\"\n                          id=\"selectedProcess\"\n                          label=\"Tedavi\"\n                          value={this.state.selectedProcess}\n                          setValue={(selected) => {\n                            this.setState({\n                              selectedProcess: selected,\n                              total: !_.isUndefined(selected[0])\n                                ? selected[0].price\n                                : \"\",\n                              discountResult: !_.isUndefined(selected[0])\n                                ? Number(selected[0].price) -\n                                  Number(selected[0].price) *\n                                    Number(this.state.discountNumber / 100)\n                                : \"\",\n                            });\n                          }}\n                          placeholder=\"Tedavi Adı\"\n                          options={this.state.processList}\n                          errorMessage={this.state.selectedProcessError}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"col-md-6 mt-2\">\n                      <div className=\"top-item select-box\">\n                        <SelectWLabel\n                          name=\"selectedDoctor\"\n                          id=\"selectedDoctor\"\n                          label=\"Doktor\"\n                          setValue={(selected) => {\n                            this.setState({\n                              selectedDoctor: selected,\n                            });\n                          }}\n                          placeholder=\"Doktor\"\n                          options={this.state.doctorList}\n                          value={this.state.selectedDoctor}\n                          errorMessage={this.state.selectedDoctorError}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col-md-6 mt-2\">\n                      <InputWLabel\n                        classes=\"mt-3\"\n                        type=\"text\"\n                        name=\"total\"\n                        id=\"total\"\n                        label=\"İşlem Ücreti\"\n                        placeholder=\"İşlem Ücreti\"\n                        value={this.state.total}\n                        setValue={this.handleChange}\n                        inputRef={this.totalRef}\n                        tabIndex={1}\n                        errorMessage={this.state.totalError}\n                        disabled={this.state.editable}\n                      />\n                      <div\n                        className=\"discount-or-amount\"\n                        onClick={() => {\n                          this.setState({ editable: !this.state.editable });\n                        }}\n                      >\n                        <div\n                          className={`discount ${\n                            !this.state.editable && \"active\"\n                          }`}\n                        >\n                          <svg\n                            width={20}\n                            fill={this.state.editable ? \"#7273CD\":\"#fff\"}\n                            viewBox=\"-15 -15 484.00019 484\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                          >\n                            <path d=\"m401.648438 18.234375c-24.394532-24.351563-63.898438-24.351563-88.292969 0l-22.101563 22.222656-235.269531 235.144531-.5.503907c-.121094.121093-.121094.25-.25.25-.25.375-.625.746093-.871094 1.121093 0 .125-.128906.125-.128906.25-.25.375-.371094.625-.625 1-.121094.125-.121094.246094-.246094.375-.125.375-.25.625-.378906 1 0 .121094-.121094.121094-.121094.25l-52.199219 156.96875c-1.53125 4.46875-.367187 9.417969 2.996094 12.734376 2.363282 2.332031 5.550782 3.636718 8.867188 3.625 1.355468-.023438 2.699218-.234376 3.996094-.625l156.847656-52.324219c.121094 0 .121094 0 .25-.121094.394531-.117187.773437-.285156 1.121094-.503906.097656-.011719.183593-.054688.253906-.121094.371094-.25.871094-.503906 1.246094-.753906.371093-.246094.75-.621094 1.125-.871094.125-.128906.246093-.128906.246093-.25.128907-.125.378907-.246094.503907-.5l257.371093-257.371094c24.351563-24.394531 24.351563-63.898437 0-88.289062zm-232.273438 353.148437-86.914062-86.910156 217.535156-217.535156 86.914062 86.910156zm-99.15625-63.808593 75.929688 75.925781-114.015626 37.960938zm347.664062-184.820313-13.238281 13.363282-86.917969-86.917969 13.367188-13.359375c14.621094-14.609375 38.320312-14.609375 52.945312 0l33.964844 33.964844c14.511719 14.6875 14.457032 38.332031-.121094 52.949218zm0 0\" />\n                          </svg>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col-md-6 mt-2\">\n                      <InputWLabel\n                        classes=\"mt-3\"\n                        type=\"discount\"\n                        name=\"discountNumber\"\n                        id=\"discountNumber\"\n                        label={\n                          this.state.discountType === \"rate\"\n                            ? \"İndirim Oranı\"\n                            : \"İndirim Tutarı\"\n                        }\n                        placeholder={\n                          this.state.discountType === \"rate\"\n                            ? \"İndirim Oranı\"\n                            : \"İndirim Tutarı\"\n                        }\n                        value={this.state.discountNumber}\n                        setValue={this.handleChange}\n                        inputRef={this.discountNumberRef}\n                        tabIndex={1}\n                      />\n                      <div className=\"discount-or-amount\">\n                        <div\n                          className={`discount ${\n                            this.state.discountType === \"rate\" && \"active\"\n                          }`}\n                          onClick={() => this.discountTypeChange(\"rate\")}\n                        >\n                          %\n                        </div>\n                        <div\n                          className={`discount ${\n                            this.state.discountType === \"amount\" && \"active\"\n                          }`}\n                          onClick={() => this.discountTypeChange(\"amount\")}\n                        >\n                          ₺\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col-md-6 mt-2\">\n                      <InputWLabel\n                        classes=\"mt-3\"\n                        type=\"text\"\n                        name=\"discountResult\"\n                        id=\"discountResult\"\n                        label=\"İndirimli Fatura Tutarı\"\n                        placeholder=\"İndirimli Fatura Tutarı\"\n                        value={\n                          this.state.discountNumber === \"\"\n                            ? \"\"\n                            : this.state.discountResult\n                        }\n                        setValue={this.handleChange}\n                        inputRef={this.discountResultRef}\n                        tabIndex={1}\n                        disabled\n                      />\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col-md-12\">\n                      <button\n                        className=\"primary-button d-inline-flex\"\n                        onClick={() => this.save()}\n                      >\n                        Onayla\n                      </button>\n                      <button\n                        className=\"primary-white-button d-inline-flex ml-4\"\n                        onClick={() => this.save(\"next\")}\n                      >\n                        Onayla ve Miktar Ekle\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n            {this.state.alinanMiktarView && (\n              <div className=\"row\">\n                <div className=\"col-md-6 mt-2\">\n                  <InputWLabel\n                    classes=\"mt-3\"\n                    type=\"text\"\n                    name=\"alinanMiktar\"\n                    id=\"alinanMiktar\"\n                    label=\"Alınan Miktar\"\n                    placeholder=\"Alınan Miktar\"\n                    value={this.state.alinanMiktar}\n                    setValue={this.handleChange}\n                    inputRef={this.alinanMiktarRef}\n                    tabIndex={1}\n                    errorMessage={this.state.errorMessage}\n                  />\n                </div>\n                <div className=\"col-md-12\">\n                  <button\n                    className=\"primary-button d-inline-flex\"\n                    onClick={() => this.saveAndFatura()}\n                  >\n                    Onayla\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CreatePaid\n","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Expense/Expense.js",["162","163","164","165","166","167","168","169"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport _ from 'lodash'\nimport DatePicker, {registerLocale, setDefaultLocale} from \"react-datepicker\";\nimport tr from 'date-fns/locale/tr';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport moment from \"moment\";\nimport API, { headers } from \"../utils/API\";\nimport { scrollToTop, currency, formatMoney } from \"../utils/helper\";\nimport InputWLabel from \"../utils/components/InputWLabel\";\nimport { authRoutes } from \"../App/routes\"\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nregisterLocale('tr', tr)\n\nexport class Expense extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      rows: [],\n      hasMore: false, \n      length: 10,\n      currentpage: 1,\n      search: '',\n      startDate: '',\n      endDate: '',\n      totalExpense: '0',\n    }\n  }\n\n  \n  componentDidMount = () => {\n    scrollToTop();\n    setTimeout(() => {\n      this.props.headerTitleSet(this.props.translate('expenses'));\n    }, 400);\n    this.getData()\n  };\n\n  getData = (type='empty')=>{\n    // this.props.pageLoadingSet(true);\n    const startDate = this.state.startDate !== '' ? moment(this.state.startDate).format('YYYY-MM-DD') : ''\n    const endDate = this.state.endDate !== '' ? moment(this.state.endDate).format('YYYY-MM-DD') : ''\n    API.get(`Expense/List?searchBy=${this.state.search}&startDate=${startDate}&endDate=${endDate}&page=${this.state.currentpage}`, {\n      headers: { ...headers, Authorization: `Bearer ${this.props.user.token}`, page: this.state.currentpage},\n    })\n      .then((res) => {\n        // this.props.pageLoadingSet(false);\n        const { data } = res;\n        const rows = type !== \"add\" ? [] : this.state.rows;\n        if (type !== \"add\") {\n          this.setState({\n            currentpage: 1\n          })\n        }\n        console.log(data.totalPages , this.state.currentpage + 1);\n        data.data.map(e => {\n          rows.push({\n            amount: e.amount,\n            clinicId: e.clinicId,\n            createDate: e.createDate,\n            currency: e.currency,\n            description: e.description,\n            id: e.id,\n            disabled: true,\n            type: ''\n          });\n        });\n        this.setState({\n          currentpage: this.state.currentpage + 1,\n          rows: rows,\n          hasMore: data.totalPages >= this.state.currentpage + 1,\n          totalExpense: data.totalExpense,\n        });\n      })\n      .catch((err) => {\n        // this.props.pageLoadingSet(false);\n      });\n  }\n  handleChange = (e, index) => {\n    const arr = this.state.rows;\n    if (!_.isUndefined(e.target)) {\n      if (e.target.name.includes('gider')) {\n        arr[index].description = e.target.value\n      } else if (e.target.name.includes('tutar')) {\n        arr[index].amount = e.target.value\n      }  \n    } else{\n      arr[index].createDate = e\n    }\n    \n    this.setState({\n      rows: arr\n    })\n    \n  };\n  addRow = () =>{\n    const arr = this.state.rows;\n    arr.unshift({\n      amount: \"\",\n      createDate: new Date(),\n      description: \"\",\n      disabled: false,\n      type: 'new',\n    });\n    this.setState({\n      rows: arr\n    })\n    console.log(this.state.rows);\n  }\n  editRow = (x, i)=>{\n    const arr = this.state.rows;\n    arr[i].disabled = false;\n    this.setState({\n      rows: arr,\n    })\n  }\n  editRowSave = (x, i)=>{\n    const data = {\n      \"id\": this.state.rows[i].id,\n      \"clinicId\": this.state.rows[i].clinicId,\n      \"description\": this.state.rows[i].description,\n      \"createDate\": moment(this.state.rows[i].createDate).format(),\n      \"amount\": parseFloat(this.state.rows[i].amount),\n      \"currency\": this.state.rows[i].currency,\n    };\n    this.props.pageLoadingSet(true);\n    this.setState({\n      rows: []\n    }, ()=>{\n    API.post(\"Expense\", data, { headers: { ...headers,Authorization: `Bearer ${this.props.user.token}`, } })\n      .then((res) => {\n        this.props.pageLoadingSet(false);\n        const oldData = this.state.rows;\n        oldData.splice(i, 1);\n        this.setState({\n          rows: oldData,\n        });\n        this.getData()\n      })\n      .catch((err) => {\n        this.props.pageLoadingSet(false);\n        this.setState({ isSending: false });\n      });\n    })\n  }\n\n  delete = (i) => {\n    console.log(this.state.rows);\n    const id = this.state.rows[i].id\n    const arr = this.state.rows;\n    if (this.state.rows[i].type === 'new') {\n      arr.splice(i, 1);\n      this.setState({\n        rows: arr\n      })\n    }\n    else{\n    this.props.pageLoadingSet(true);\n    API.delete(`Expense?expenseId=${id}`, {\n      headers: {\n        ...headers,\n        Authorization: `Bearer ${this.props.user.token}`,\n      },\n    })\n      .then((res) => {\n        this.setState({\n          rows: [],\n        },()=>{\n          this.getData();\n        })\n        this.props.pageLoadingSet(false);\n      })\n      .catch((err) => {\n        this.props.pageLoadingSet(false);\n      });\n    }\n  }\n\n  timeout = '';\n  search = (e) => {\n    const { value } = e.target;\n    clearTimeout(this.timeout);\n    \n      this.setState(\n        {\n          rows: [],\n          search: value,\n          currentpage: 1,\n        },\n        () => {\n          this.timeout = setTimeout(() => {\n            this.getData();\n          }, 500);\n        }\n      );\n    \n  };\n  render() {\n    return (\n      <div className=\"Payments\">\n        <div className=\"align-items-center justify-content-between mt-4 mb-4\">\n          <div className=\"row\">\n            <div className=\"col-md-3\">\n              <a\n                className=\"primary-button d-inline-flex cursor-pointer\"\n                onClick={() => {\n                  this.addRow();\n                }}\n              >\n                Yeni Gider Ekle\n              </a>\n            </div>\n            <div className=\"col-md-9\">\n              <div className=\"row\">\n                <div className=\"col-md-4\">\n                  <DatePicker\n                    selected={this.state.startDate}\n                    onChange={(startDate) => {\n                      this.setState(\n                        {\n                          startDate: _.isNull(startDate) ? \"\" : startDate,\n                        },\n                        () => {\n                          this.getData();\n                        }\n                      );\n                    }}\n                    placeholderText=\"Başlangıç Tarihi\"\n                    className=\"w-100\"\n                  />\n                </div>\n                <div className=\"col-md-4\">\n                  <DatePicker\n                    selected={this.state.endDate}\n                    onChange={(endDate) => {\n                      this.setState(\n                        {\n                          endDate: _.isNull(endDate) ? \"\" : endDate,\n                        },\n                        () => {\n                          this.getData();\n                        }\n                      );\n                    }}\n                    placeholderText=\"Bitiş Tarihi\"\n                    className=\"w-100\"\n                  />\n                </div>\n                <div className=\"col-md-4 d-flex justify-content-end\">\n                  <InputWLabel\n                    name=\"search\"\n                    type=\"searchT\"\n                    classes=\"mb-0 w-100\"\n                    id=\"search\"\n                    value={this.state.search}\n                    setValue={this.search}\n                    tabIndex={1}\n                    label=\"\"\n                    placeholder=\"Ara\"\n                    icon={\n                      <svg\n                        width=\"20\"\n                        height=\"20\"\n                        viewBox=\"0 0 20 20\"\n                        fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                      >\n                        <path\n                          d=\"M19.6672 18.1075L14.7625 13.1963C17.2288 9.98675 16.9826 5.34958 14.0229 2.41441C12.4065 0.796245 10.3234 0 8.21364 0C6.10387 0 4.02067 0.795147 2.40443 2.41441C-0.801477 5.62392 -0.801477 10.8364 2.40443 14.0459C4.02078 15.6641 6.10387 16.4603 8.21364 16.4603C9.96701 16.4603 11.7215 15.9116 13.1742 14.7864L18.1057 19.671C18.3251 19.8907 18.5991 20 18.8999 20C19.174 20 19.4758 19.8907 19.6942 19.671C20.1063 19.2595 20.1063 18.5458 19.6674 18.1075H19.6672ZM8.24028 14.2387C6.62393 14.2387 5.14344 13.6075 3.99278 12.4834C1.6635 10.1515 1.6635 6.33874 3.99278 3.97886C5.11675 2.85363 6.62393 2.22353 8.24028 2.22353C9.85663 2.22353 11.3371 2.85473 12.4878 3.97886C13.6385 5.1041 14.2412 6.61297 14.2412 8.23114C14.2412 9.84931 13.6107 11.3315 12.4878 12.4834C11.3638 13.6354 9.82989 14.2387 8.24028 14.2387Z\"\n                          fill=\"#474555\"\n                        />\n                      </svg>\n                    }\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div>\n          <InfiniteScroll\n            dataLength={this.state.rows.length}\n            next={() => this.getData(\"add\")}\n            hasMore={this.state.hasMore}\n            loader={\n              <tr>\n                <td>...</td>\n              </tr>\n            }\n            height={600}\n            endMessage={\n              <p style={{ textAlign: \"center\" }}>\n                {/*<b>Yay! You have seen it all</b>*/}\n              </p>\n            }\n          >\n            <div className=\"react-infinite-table react-infinite-table-fill example-table\">\n              <table className=\"table table-bordered table-striped\">\n                <thead>\n                  <tr>\n                    <th className=\"react-infinite-table-col-0\">Tarih</th>\n                    <th className=\"react-infinite-table-col-1\">Gider İsmi</th>\n                    <th className=\"react-infinite-table-col-2\">Tutar</th>\n                    <th className=\"react-infinite-table-col-4\"></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.rows.map((i, index) => (\n                    <tr key={index + \"a\"} id={\"rowElement\" + i.id}>\n                      <td className=\"react-infinite-table-col-0 pt-3 pb-3\">\n                        <DatePicker\n                          selected={new Date(i.createDate)}\n                          onChange={(date) => {\n                            this.handleChange(date, index);\n                          }}\n                          placeholderText=\"Başlangıç Tarihi\"\n                          className=\"w-100 min\"\n                          showTimeSelect\n                          locale=\"tr\"\n                          dateFormat=\"d MMMM yyyy h:mm\"\n                          disabled={i.disabled}\n                        />\n                      </td>\n                      <td className=\"react-infinite-table-col-1 pt-2 pb-2\">\n                        <InputWLabel\n                          name={`gider${index}`}\n                          type=\"text\"\n                          classes={`mb-0 mw-300 w-100 min ${\n                            i.disabled ? \"disabled\" : \"\"\n                          }`}\n                          value={i.description}\n                          tabIndex={1}\n                          label=\"\"\n                          disabled={i.disabled}\n                          setValue={(e) => this.handleChange(e, index)}\n                        />\n                      </td>\n                      <td className=\"react-infinite-table-col-1 pt-2 pb-2\">\n                        <InputWLabel\n                          name={`tutar${index}`}\n                          type=\"text\"\n                          classes={`mb-0 mw-300 w-100 min ${\n                            i.disabled ? \"disabled\" : \"\"\n                          }`}\n                          value={\n                            i.disabled\n                              ? formatMoney(i.amount) +\n                                \" \" +\n                                currency(i.currency)\n                              : i.amount\n                          }\n                          tabIndex={1}\n                          label=\"\"\n                          disabled={i.disabled}\n                          setValue={(e) => this.handleChange(e, index)}\n                        />\n                      </td>\n                      <td className=\"react-infinite-table-col-4 text-right pt-2 pb-2\">\n                        {i.disabled ? (\n                          <a\n                            className=\"d-inline-flex align-items-center text-blue pl-3 pr-3 cursor-pointer\"\n                            onClick={(e) => {\n                              this.editRow(i, index);\n                            }}\n                          >\n                            Düzenle\n                          </a>\n                        ) : (\n                          <a\n                            className=\"d-inline-flex align-items-center text-blue pl-3 pr-3 cursor-pointer\"\n                            onClick={(e) => {\n                              this.editRowSave(i, index);\n                            }}\n                          >\n                            Kaydet\n                          </a>\n                        )}\n                        <a\n                          className=\"d-inline-flex align-items-center text-pink pl-3 pr-3 cursor-pointer\"\n                          onClick={(e) => {\n                            this.delete(index);\n                          }}\n                        >\n                          Sil\n                        </a>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </InfiniteScroll>\n        </div>\n        <p className=\"mt-3 text-right\">\n          <b>Toplam Gider: {this.state.totalExpense}</b>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Expense\n","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Analysis/Analysis.js",["170","171","172","173"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport _ from 'lodash'\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport moment from \"moment\";\nimport API, { headers } from \"../utils/API\";\nimport { scrollToTop, currency, formatMoney } from \"../utils/helper\";\nimport InputWLabel from \"../utils/components/InputWLabel\";\n\nexport class Expense extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      processRows: [],\n      doctorRows: [],\n      startDate: '',\n      endDate: '',\n    }\n  }\n\n  \n  componentDidMount = () => {\n    scrollToTop();\n    setTimeout(() => {\n      this.props.headerTitleSet(this.props.translate('analyses'));\n    }, 400);\n    this.getData()\n  };\n\n  getData = ()=>{\n    // this.props.pageLoadingSet(true);\n    const startDate = this.state.startDate !== '' ? moment(this.state.startDate).format('YYYY-MM-DD') : ''\n    const endDate = this.state.endDate !== '' ? moment(this.state.endDate).format('YYYY-MM-DD') : ''\n    API.get(`/Dashboard/Analysis?startDate=${startDate}&endDate=${endDate}`, {\n      headers: { ...headers, Authorization: `Bearer ${this.props.user.token}`},\n    })\n      .then((res) => {\n        // this.props.pageLoadingSet(false);\n        const { data } = res;\n        this.setState({\n          processRows: data.processAnalyses,\n          doctorRows: data.doctorAnalyses\n        })\n      })\n      .catch((err) => {\n        // this.props.pageLoadingSet(false);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"Payments\">\n        <div className=\"align-items-center justify-content-between mt-4 mb-4\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <DatePicker\n                selected={this.state.startDate}\n                onChange={(startDate) => {\n                  this.setState(\n                    {\n                      startDate: _.isNull(startDate) ? '' : startDate,\n                    },\n                    () => {\n                      this.getData();\n                    }\n                  );\n                }}\n                placeholderText=\"Başlangıç Tarihi\"\n                className=\"w-100 min\"\n              />\n            </div>\n            <div className=\"col-md-6\">\n              <DatePicker\n                selected={this.state.endDate}\n                onChange={(endDate) => {\n                  this.setState(\n                    {\n                      endDate: _.isNull(endDate) ? '' : endDate,\n                    },\n                    () => {\n                      this.getData();\n                    }\n                  );\n                }}\n                placeholderText=\"Bitiş Tarihi\"\n                className=\"w-100 min\"\n              />\n            </div>\n          </div>\n        </div>\n        <div>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <div className=\"react-infinite-table react-infinite-table-fill example-table rounded table-bordered \">\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <h3 className=\"w-100 p-3 pt-4\">Tedavilere Göre</h3>\n                  </div>\n                  <div className=\"col-md-12\">\n                    <table className=\"table table-striped\">\n                      <thead>\n                        <tr>\n                          <th className=\"react-infinite-table-col-0\">\n                            Tedavi Adı\n                          </th>\n                          <th className=\"react-infinite-table-col-1 text-right\">\n                            Ciro\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {this.state.processRows.map((i, index) => (\n                          <tr key={index + \"a\"} id={\"rowElement\" + i.processId}>\n                            <td className=\"react-infinite-table-col-0 pt-3 pb-3\">\n                              {i.process.name}\n                            </td>\n                            <td className=\"react-infinite-table-col-0 pt-3 pb-3 text-right\">\n                              {i.amount} TL\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-md-6\">\n              <div className=\"react-infinite-table react-infinite-table-fill example-table rounded table-bordered \">\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <h3 className=\"w-100 p-3 pt-4\">Doktora Göre</h3>\n                  </div>\n                  <div className=\"col-md-12\">\n                    <table className=\"table table-striped\">\n                      <thead>\n                        <tr>\n                          <th className=\"react-infinite-table-col-0\">\n                            Doktor Adı\n                          </th>\n                          <th className=\"react-infinite-table-col-1 text-right\">\n                            Ciro\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {this.state.doctorRows.map((i, index) => (\n                          <tr key={index + \"a\"} id={\"rowElement\" + i.doctorId}>\n                            <td className=\"react-infinite-table-col-0 pt-3 pb-3\">\n                              {i.doctor.fullName}\n                            </td>\n                            <td className=\"react-infinite-table-col-0 pt-3 pb-3 text-right\">\n                              {i.amount} TL\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Expense\n",{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","severity":1,"message":"179","line":13,"column":8,"nodeType":"180","messageId":"181","endLine":13,"endColumn":33},{"ruleId":"178","severity":1,"message":"182","line":15,"column":8,"nodeType":"180","messageId":"181","endLine":15,"endColumn":33},{"ruleId":"178","severity":1,"message":"183","line":17,"column":8,"nodeType":"180","messageId":"181","endLine":17,"endColumn":24},{"ruleId":"178","severity":1,"message":"184","line":1,"column":10,"nodeType":"180","messageId":"181","endLine":1,"endColumn":15},{"ruleId":"174","replacedBy":"185"},{"ruleId":"176","replacedBy":"186"},{"ruleId":"178","severity":1,"message":"187","line":13,"column":7,"nodeType":"180","messageId":"181","endLine":13,"endColumn":16},{"ruleId":"188","severity":1,"message":"189","line":165,"column":19,"nodeType":"190","endLine":171,"endColumn":20},{"ruleId":"188","severity":1,"message":"189","line":174,"column":19,"nodeType":"190","endLine":180,"endColumn":20},{"ruleId":"188","severity":1,"message":"189","line":183,"column":19,"nodeType":"190","endLine":189,"endColumn":20},{"ruleId":"191","severity":1,"message":"192","line":41,"column":25,"nodeType":"193","messageId":"194","endLine":41,"endColumn":27},{"ruleId":"178","severity":1,"message":"195","line":2,"column":8,"nodeType":"180","messageId":"181","endLine":2,"endColumn":17},{"ruleId":"191","severity":1,"message":"192","line":80,"column":24,"nodeType":"193","messageId":"194","endLine":80,"endColumn":26},{"ruleId":"196","severity":1,"message":"197","line":41,"column":36,"nodeType":"198","messageId":"199","endLine":41,"endColumn":37,"suggestions":"200"},{"ruleId":"196","severity":1,"message":"201","line":41,"column":38,"nodeType":"198","messageId":"199","endLine":41,"endColumn":39,"suggestions":"202"},{"ruleId":"196","severity":1,"message":"203","line":41,"column":40,"nodeType":"198","messageId":"199","endLine":41,"endColumn":41,"suggestions":"204"},{"ruleId":"191","severity":1,"message":"192","line":103,"column":28,"nodeType":"193","messageId":"194","endLine":103,"endColumn":30},{"ruleId":"191","severity":1,"message":"192","line":134,"column":28,"nodeType":"193","messageId":"194","endLine":134,"endColumn":30},{"ruleId":"178","severity":1,"message":"205","line":2,"column":10,"nodeType":"180","messageId":"181","endLine":2,"endColumn":14},{"ruleId":"178","severity":1,"message":"206","line":4,"column":37,"nodeType":"180","messageId":"181","endLine":4,"endColumn":53},{"ruleId":"178","severity":1,"message":"207","line":11,"column":10,"nodeType":"180","messageId":"181","endLine":11,"endColumn":20},{"ruleId":"191","severity":1,"message":"192","line":56,"column":25,"nodeType":"193","messageId":"194","endLine":56,"endColumn":27},{"ruleId":"188","severity":1,"message":"189","line":204,"column":15,"nodeType":"190","endLine":209,"endColumn":16},{"ruleId":"188","severity":1,"message":"189","line":360,"column":27,"nodeType":"190","endLine":365,"endColumn":28},{"ruleId":"188","severity":1,"message":"189","line":369,"column":27,"nodeType":"190","endLine":374,"endColumn":28},{"ruleId":"188","severity":1,"message":"189","line":378,"column":25,"nodeType":"190","endLine":383,"endColumn":26},{"ruleId":"178","severity":1,"message":"205","line":2,"column":10,"nodeType":"180","messageId":"181","endLine":2,"endColumn":14},{"ruleId":"178","severity":1,"message":"208","line":8,"column":23,"nodeType":"180","messageId":"181","endLine":8,"endColumn":31},{"ruleId":"178","severity":1,"message":"209","line":8,"column":33,"nodeType":"180","messageId":"181","endLine":8,"endColumn":44},{"ruleId":"178","severity":1,"message":"210","line":9,"column":8,"nodeType":"180","messageId":"181","endLine":9,"endColumn":19},"no-native-reassign",["211"],"no-negated-in-lhs",["212"],"no-unused-vars","'doctor_settingsMenuActive' is defined but never used.","Identifier","unusedVar","'system_settingsMenuActive' is defined but never used.","'clinicMenuActive' is defined but never used.","'alert' is defined but never used.",["211"],["212"],"'allRoutes' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'PropTypes' is defined but never used.","no-useless-escape","Unnecessary escape character: \\(.","Literal","unnecessaryEscape",["213","214"],"Unnecessary escape character: \\).",["215","216"],"Unnecessary escape character: \\+.",["217","218"],"'Link' is defined but never used.","'setDefaultLocale' is defined but never used.","'authRoutes' is defined but never used.","'currency' is defined but never used.","'formatMoney' is defined but never used.","'InputWLabel' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"219","fix":"220","desc":"221"},{"messageId":"222","fix":"223","desc":"224"},{"messageId":"219","fix":"225","desc":"221"},{"messageId":"222","fix":"226","desc":"224"},{"messageId":"219","fix":"227","desc":"221"},{"messageId":"222","fix":"228","desc":"224"},"removeEscape",{"range":"229","text":"230"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"231","text":"232"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"233","text":"230"},{"range":"234","text":"232"},{"range":"235","text":"230"},{"range":"236","text":"232"},[1018,1019],"",[1018,1018],"\\",[1020,1021],[1020,1020],[1022,1023],[1022,1022]]