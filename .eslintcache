[{"/Users/erdincmaden/Documents/Other/monk-medical-web/src/index.js":"1","/Users/erdincmaden/Documents/Other/monk-medical-web/src/ErrorBoundary.js":"2","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App.js":"3","/Users/erdincmaden/Documents/Other/monk-medical-web/src/store.js":"4","/Users/erdincmaden/Documents/Other/monk-medical-web/src/rootReducer.js":"5","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/Layout.js":"6","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/Router.js":"7","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/appActions.js":"8","/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/LanguageFiles.js":"9","/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/API.js":"10","/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/helper.js":"11","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/authActions.js":"12","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/components/Alert.js":"13","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/appReducer.js":"14","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/routes.js":"15","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/authReducer.js":"16","/Users/erdincmaden/Documents/Other/monk-medical-web/src/NotFound/NotFound.js":"17","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/Layout/Header.js":"18","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/pages/ForgotPassword.js":"19","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Home/Home.js":"20","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/Layout/components/UserArea.js":"21","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/pages/Login.js":"22","/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/components/InputWLabel.js":"23","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/pages/components/LeftSide.js":"24","/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/components/CutomCheckbox.js":"25","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Payments/Payments.js":"26","/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/components/SelectWLabel.js":"27","/Users/erdincmaden/Documents/Other/monk-medical-web/src/UserDetail/UserDetail.js":"28","/Users/erdincmaden/Documents/Other/monk-medical-web/src/CreatePatient/CreatePatient.js":"29","/Users/erdincmaden/Documents/Other/monk-medical-web/src/CreatePaid/CreatePaid.js":"30","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Expense/Expense.js":"31"},{"size":892,"mtime":1610576010037,"results":"32","hashOfConfig":"33"},{"size":426,"mtime":1610034889211,"results":"34","hashOfConfig":"33"},{"size":5382,"mtime":1611511701749,"results":"35","hashOfConfig":"33"},{"size":323,"mtime":1610041609860,"results":"36","hashOfConfig":"33"},{"size":405,"mtime":1610035483102,"results":"37","hashOfConfig":"33"},{"size":4631,"mtime":1611515775492,"results":"38","hashOfConfig":"33"},{"size":3801,"mtime":1611258093807,"results":"39","hashOfConfig":"33"},{"size":450,"mtime":1611258433029,"results":"40","hashOfConfig":"33"},{"size":453,"mtime":1610223382980,"results":"41","hashOfConfig":"33"},{"size":239,"mtime":1611514312488,"results":"42","hashOfConfig":"33"},{"size":1825,"mtime":1611513367307,"results":"43","hashOfConfig":"33"},{"size":234,"mtime":1610216651179,"results":"44","hashOfConfig":"33"},{"size":3167,"mtime":1610035823406,"results":"45","hashOfConfig":"33"},{"size":1046,"mtime":1610818349425,"results":"46","hashOfConfig":"33"},{"size":2654,"mtime":1611515812844,"results":"47","hashOfConfig":"33"},{"size":874,"mtime":1610656702805,"results":"48","hashOfConfig":"33"},{"size":1386,"mtime":1610221638095,"results":"49","hashOfConfig":"33"},{"size":2395,"mtime":1610818636370,"results":"50","hashOfConfig":"33"},{"size":5130,"mtime":1611514566426,"results":"51","hashOfConfig":"33"},{"size":8556,"mtime":1611513347320,"results":"52","hashOfConfig":"33"},{"size":1238,"mtime":1611161636492,"results":"53","hashOfConfig":"33"},{"size":6072,"mtime":1611603534669,"results":"54","hashOfConfig":"33"},{"size":4173,"mtime":1611485335304,"results":"55","hashOfConfig":"33"},{"size":641,"mtime":1610557030096,"results":"56","hashOfConfig":"33"},{"size":785,"mtime":1610558021800,"results":"57","hashOfConfig":"33"},{"size":7237,"mtime":1611513379849,"results":"58","hashOfConfig":"33"},{"size":2265,"mtime":1611485974193,"results":"59","hashOfConfig":"33"},{"size":12110,"mtime":1611513441770,"results":"60","hashOfConfig":"33"},{"size":6152,"mtime":1611491192040,"results":"61","hashOfConfig":"33"},{"size":13671,"mtime":1611513452269,"results":"62","hashOfConfig":"33"},{"size":4929,"mtime":1611517100395,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1748078",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"66"},"/Users/erdincmaden/Documents/Other/monk-medical-web/src/index.js",[],["136","137"],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/ErrorBoundary.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/App.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/store.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/rootReducer.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/Layout.js",["138","139","140","141"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport logo from '../assets/images/payment-logo.svg'\nimport homeMenu from '../assets/images/home-menu.svg'\nimport homeMenuActive from '../assets/images/home-menu-active.svg'\nimport paymentsMenu from '../assets/images/payments-menu.svg'\nimport paymentsMenuActive from '../assets/images/payments-menu-active.svg'\nimport analysesMenu from '../assets/images/analyses-menu.svg'\nimport analysesMenuActive from '../assets/images/analyses-menu-active.svg'\nimport expensesMenu from '../assets/images/expenses-menu.svg'\nimport expensesMenuActive from '../assets/images/expenses-menu-active.svg'\nimport doctor_settingsMenu from '../assets/images/doctor_settings-menu.svg'\nimport doctor_settingsMenuActive from '../assets/images/doctor_settings-menu-active.svg'\nimport system_settingsMenu from '../assets/images/system_settings-menu.svg'\nimport system_settingsMenuActive from '../assets/images/system_settings-menu-active.svg'\nimport clinicMenu from '../assets/images/clinic-menu.svg'\nimport clinicMenuActive from '../assets/images/clinic-menu-active.svg'\nimport { withRouter } from \"react-router\";\nimport { connect } from \"react-redux\";\nimport { authRoutes } from \"../App/routes\"\nconst Header = React.lazy(() => import(\"./Layout/Header\"));\nconst Layout = (props) => {\n  const {location} = props;\n  return (\n    <>\n      <div className=\"d-flex\">\n        {props.user.isLoggedIn && (\n          <div className=\"left-side-menu min-vh-100\" id=\"sidebar-wrapper\">\n            <Link to={authRoutes.home.links[props.lang]}>\n              <img src={logo} alt={props.translate(\"payments\")} />\n            </Link>\n            <Link\n              className={location.pathname === \"/\" ? \"active\" : \"\"}\n              to={authRoutes.home.links[props.lang]}\n            >\n              <img\n                src={location.pathname === \"/\" ? homeMenuActive : homeMenu}\n                alt={props.translate(\"home\")}\n              />\n              {props.translate(\"home\")}\n            </Link>\n            <Link\n              className={\n                location.pathname.includes(\n                  authRoutes.payments.links[props.lang]\n                )\n                  ? \"active\"\n                  : \"\"\n              }\n              to={authRoutes.payments.links[props.lang]}\n            >\n              <img\n                src={\n                  location.pathname.includes(\n                    authRoutes.payments.links[props.lang]\n                  )\n                    ? paymentsMenuActive\n                    : paymentsMenu\n                }\n                alt={props.translate(\"payments\")}\n              />\n              {props.translate(\"payments\")}\n            </Link>\n            <Link>\n              <img src={analysesMenu} alt={props.translate(\"analyses\")} />\n              {props.translate(\"analyses\")}\n            </Link>\n            <Link \n              className={\n                location.pathname.includes(\n                  authRoutes.expense.links[props.lang]\n                )\n                  ? \"active\"\n                  : \"\"\n              }\n              to={authRoutes.expense.links[props.lang]}>\n              <img \n                src={\n                  location.pathname.includes(\n                    authRoutes.expense.links[props.lang]\n                  )\n                    ? expensesMenuActive\n                    : expensesMenu\n                }\n                alt={props.translate(\"expenses\")} />\n              {props.translate(\"expenses\")}\n            </Link>\n            <Link className=\"border-top\">\n              <img\n                src={doctor_settingsMenu}\n                alt={props.translate(\"doctor_settings\")}\n              />\n              {props.translate(\"doctor_settings\")}\n            </Link>\n\n            <Link className=\"border-top\">\n              <img\n                src={system_settingsMenu}\n                alt={props.translate(\"system_settings\")}\n              />\n              {props.translate(\"system_settings\")}\n            </Link>\n            <hr />\n            <Link>\n              <img src={clinicMenu} alt={props.translate(\"clinic\")} />\n              {props.translate(\"clinic\")}\n            </Link>\n          </div>\n        )}\n        <div className=\"container-fluid\">\n          <Header\n            lang={props.lang}\n            user={props.user}\n            location={props.location}\n            translate={props.translate}\n            headerTitle={props.headerTitle}\n          />\n          <div id=\"main\">{props.children}</div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default connect()(withRouter(Layout));\n","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/Router.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/appActions.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/LanguageFiles.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/API.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/helper.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/authActions.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/components/Alert.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/appReducer.js",["142"],"import { alert } from \"./appActions\";\n\nconst initState = {\n  alert: {\n    type: \"\",\n    content: \"\",\n    timeout: 0,\n    isActive: false,\n  },\n  connection: \"\",\n  pageLoading: false,\n  headerTitle: ''\n};\n\nconst appReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"ALERT\": {\n      const alert = {\n        type: action.alertType,\n        title: action.title,\n        content: action.content,\n        timeout: action.timeout,\n        isActive: true,\n      };\n\n      const app = { ...state, alert };\n\n      return { ...app };\n    }\n\n    case \"RESET_ALERT\": {\n      const alert = {\n        type: \"\",\n        title: \"\",\n        content: \"\",\n        timeout: 0,\n        isActive: false,\n      };\n\n      const app = { ...state, alert };\n\n      return { ...app };\n    }\n\n    case 'PAGE_LOADING': {\n      return { ...state, pageLoading: action.pageLoading } \n    }\n\n    case 'HEADER_TITLE': {\n      return { ...state, headerTitle: action.headerTitle } \n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default appReducer;\n","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/routes.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/authReducer.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/NotFound/NotFound.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/Layout/Header.js",["143"],"import React, { Component, createRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport avatar from '../../assets/images/avatar.svg'\n// import Logo from \"../../assets/images/logo.png\";\nimport { logout, update } from \"../../Auth/authActions\";\nimport {\n  authRoutes,\n  globalRoutes,\n  guestRoutes,\n} from \"../routes\";\nimport { UserArea } from \"./components/UserArea\";\n\nconst allRoutes = {\n  ...globalRoutes,\n  ...guestRoutes,\n  ...authRoutes,\n};\n\nclass Header extends Component {\n  state = {\n    isProfilePopupOn: false,\n  };\n\n  profilePopupRef = createRef();\n\n  showProfilePopup = (e) => {\n    e.preventDefault();\n\n    this.setState(\n      (prevState) => {\n        return { isProfilePopupOn: !prevState.isProfilePopupOn };\n      },\n      () => {\n        document.addEventListener(\"click\", this.closeProfilePopup, false);\n      }\n    );\n  };\n\n  closeProfilePopup = (e) => {\n    if (e.target !== this.profilePopupRef.current) {\n      this.setState({ isProfilePopupOn: false }, () => {\n        document.removeEventListener(\"click\", this.closeProfilePopup, false);\n      });\n    }\n  };\n\n  render() {\n    return this.props.user.isLoggedIn ? (\n      <div\n        className=\"header\"\n        data-alt={\n          this.props.location.pathname !==\n          guestRoutes.login.links[this.props.lang]\n        }\n      >\n        <div className=\"row\">\n          <div className=\"col-6 d-flex align-items-center\">\n            <p className='m-0'>{this.props.headerTitle}</p>\n          </div>\n          <div className=\"col-6 d-flex justify-content-end align-items-center\">\n            <span className=\"d-none d-md-flex\">\n              <UserArea\n                user={this.props.user}\n                isProfilePopupOn={this.state.isProfilePopupOn}\n                showProfilePopup={this.showProfilePopup}\n                logout={this.props.logout}\n                profilePopupRef={this.profilePopupRef}\n                lang={this.props.lang}\n                update={this.props.update}\n                avatar={avatar}\n              />\n            </span>\n          </div>\n        </div>\n      </div>\n    ) : (\n      <div></div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    logout: () => dispatch(logout()),\n    update: (user) => dispatch(update(user)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(withRouter(Header));\n","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/pages/ForgotPassword.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/Home/Home.js",["144","145","146"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Bar } from '@reactchartjs/react-chart.js'\nimport { Link } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { formatMoney, scrollToTop } from \"../utils/helper\";\nimport API, { headers } from \"../utils/API\";\nimport { headerTitleSet } from \"../App/appActions\";\nimport { authRoutes } from \"../App/routes\"\n\nexport class Home extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      startDate: '',\n      endDate:'',\n      graphStartDate:moment().subtract(1, 'months').format('YYYY-MM-DD'),\n      balanceList:[],\n      creditTotal:null,\n      debtTotal: null,\n      processCount: 0,\n      list: [],\n      barFilter: 'mounth',\n      data: {\n        labels: [],\n        datasets: [{\n          type: 'line',\n          label: ' ',\n          borderColor: '#FDC132',\n          borderWidth: 2,\n          fill: false,\n          data: [],\n        },\n        {\n          type: 'bar',\n          label: ' ',\n          backgroundColor: '#38C976',\n          data: [],\n          borderColor: 'white',\n          borderWidth: 0,\n        }],\n      },\n    }\n  }\n  componentDidMount = () => {\n    this.props.headerTitleSet(this.props.translate('home'));\n    this.getData()\n    scrollToTop();\n  };\n\n  getData = () => {\n    const startDate = this.state.startDate !== '' ? moment(this.state.startDate).format('YYYY-MM-DD') : ''\n    const endDate = this.state.endDate !== '' ? moment(this.state.endDate).format('YYYY-MM-DD') : ''\n    const graphStartDate = this.state.graphStartDate !== '' ? moment(this.state.graphStartDate).format('YYYY-MM-DD') : ''\n    API.get(`Dashboard/Home?startDate=${startDate}&endDate=${endDate}&graphStartDate=${graphStartDate}`, { headers: { ...headers, Authorization: `Bearer ${this.props.user.token}` }})\n        .then((res) => {\n          const {balanceList, creditTotal, debtTotal, list, processCount} = res.data;\n            const labels= [];\n            const lineData= []\n            const barData= []\n          balanceList.forEach((e, i) => {\n            labels.push(moment(e.date).format('DD.MM.YY'));\n            lineData.push(e.amount)\n            barData.push(e.amount)\n          });\n          this.setState({\n            balanceList, \n            creditTotal, \n            debtTotal, \n            list,\n            processCount,\n            data: {\n              labels,\n              datasets: [{\n                type: 'line',\n                label: ' ',\n                borderColor: '#FDC132',\n                borderWidth: 2,\n                fill: false,\n                data: lineData,\n              },\n              {\n                type: 'bar',\n                label: ' ',\n                backgroundColor: '#38C976',\n                data: barData,\n                borderColor: 'white',\n                borderWidth: 0,\n              }],\n            }\n          });\n          this.props.pageLoadingSet(false);\n        })\n        .catch((err) => {\n          alert(err.response.data.value)\n          this.props.pageLoadingSet(false);\n        });\n  }\n\n  setDate(date, type){\n    if(type === 'start'){\n      this.setState({\n        startDate: date\n      }, ()=>{\n        this.state.endDate !== '' && this.state.startDate !== '' && this.getData()\n      })\n    } else{\n      this.setState({\n        endDate: date\n      },()=>{\n        this.state.endDate !== '' && this.state.startDate !== '' && this.getData()\n      })\n    }\n  }\n  barFilter(e){\n    let date = '';\n    if (e === 'day') {\n      date = moment().subtract(7, 'day').format('YYYY-MM-DD')\n    } else if(e === 'mounth'){\n      date = moment().subtract(1, 'months').format('YYYY-MM-DD')\n    } else if(e==='year'){\n      date = moment().subtract(1, 'years').format('YYYY-MM-DD')\n    }\n    console.log(date);\n    this.setState({\n      barFilter: e,\n      graphStartDate: date\n    },()=>{\n      this.getData()\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"Home\">\n        <div className=\"align-items-center justify-content-between mt-4 mb-4\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <Link\n                className=\"primary-button d-inline-flex\"\n                to={authRoutes.createPatient.links[this.props.lang]}\n              >\n                Hasta Kaydı Oluştur\n              </Link>\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-6 mb-4\">\n            <div className=\"border p-3 rounded h-100\">\n              <div className=\"d-flex justify-content-between align-items-center\">\n                <h3>Ciro</h3>\n                <div className=\"bar-filter\">\n                  <a\n                    className={this.state.barFilter === 'day' ? 'active' : ''}\n                    alt=\"D\"\n                    onClick={() => {\n                      this.barFilter('day')\n                    }}\n                  >\n                    D\n                  </a>\n                  <a\n                    className={this.state.barFilter === 'mounth' ? 'active' : ''}\n                    alt=\"M\"\n                    onClick={() => {\n                      this.barFilter('mounth')\n                    }}\n                  >\n                    M\n                  </a>\n                  <a\n                    className={this.state.barFilter === 'year' ? 'active' : ''}\n                    alt=\"Y\"\n                    onClick={() => {\n                      this.barFilter('year')\n                    }}\n                  >\n                    Y\n                  </a>\n                </div>\n              </div>\n              <Bar data={this.state.data} />\n            </div>\n          </div>\n          <div className=\"col-md-6 mb-4\">\n            <div className=\"row h-100\">\n              <div className=\"col-12 mb-4\">\n                <div className=\"border rounded pl-3 pr-3 pt-4 pb-4\">\n                  <div className=\"pb-3 mb-4 border-bottom\">\n                    <div className=\"col-md-12\">\n                      <div className=\"row\">\n                        <div className=\"col-6\">\n                          <DatePicker\n                            selected={this.state.startDate}\n                            onChange={(date) => this.setDate(date, \"start\")}\n                            placeholderText=\"Başlangıç Tarihi\"\n                            className=\"w-100 min\"\n                          />\n                        </div>\n                        <div className=\"col-6\">\n                          <DatePicker\n                            selected={this.state.endDate}\n                            className=\"w-100 min\"\n                            onChange={(date) => this.setDate(date, \"end\")}\n                            placeholderText=\"Bitiş Tarihi\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"row h-100 align-items-center\">\n                    <div className=\"col-6 text-center\">\n                      <p className=\"fs-24 mb-2\">{this.state.processCount}</p>\n                      <p className=\"mb-0\">Tedavi Sayısı</p>\n                    </div>\n                    <div className=\"col-6 text-center\">\n                      <p className=\"fs-24 mb-2\">{formatMoney(this.state.debtTotal)} TL</p>\n                      <p className=\"mb-0\">Ciro</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"col-12 d-flex flex-column justify-content-end\">\n                <div className=\"border rounded pl-3 pr-3 pt-4 pb-4 h-100\">\n                  <h3 className=\"border-bottom pb-3 mb-0\">Açık Bakiye</h3>\n                  <div className=\"row h-100 align-items-center\">\n                    <div className=\"col-12 text-center\">\n                      <p className=\"fs-24 mb-2\">\n                      {formatMoney(this.state.debtTotal - this.state.creditTotal)} TL\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.auth.user,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    headerTitleSet: (text) => dispatch(headerTitleSet(text)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","/Users/erdincmaden/Documents/Other/monk-medical-web/src/App/Layout/components/UserArea.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/pages/Login.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/components/InputWLabel.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/Auth/pages/components/LeftSide.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/components/CutomCheckbox.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/Payments/Payments.js",["147","148","149"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport _ from 'lodash'\nimport API, { headers } from \"../utils/API\";\nimport { scrollToTop, currency, formatMoney } from \"../utils/helper\";\nimport InputWLabel from \"../utils/components/InputWLabel\";\nimport { authRoutes } from \"../App/routes\"\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nexport class Payments extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      rows: [],\n      hasMore: false, \n      length: 10,\n      currentpage: 1,\n      search: ''\n    }\n  }\n\n  \n  componentDidMount = () => {\n    scrollToTop();\n    this.props.headerTitleSet(this.props.translate('payments'));\n    this.getData()\n  };\n\n  getData = ()=>{\n    API.get(`Payment/List?searchBy=${this.state.search}&page=${this.state.currentpage}`, {\n      headers: { ...headers, Authorization: `Bearer ${this.props.user.token}`, page: this.state.currentpage},\n    })\n      .then((res) => {\n        this.props.pageLoadingSet(false);\n        const { data } = res;\n        const rows = this.state.rows;\n        data.data.map(e => {\n          rows.push({\n            id: e.user.id,\n            fullName: e.user.fullName,\n            price: e.price,\n            amount: e.amount,\n            currency: currency(e.currency),\n            balance: '',\n            charged: '',\n            paymentType: e.paymentType,\n          });\n        });\n        this.setState({\n          currentpage: this.state.currentpage+1,\n          rows: rows,\n          hasMore: data.totalPages >= this.state.currentpage+1\n        })\n\n      })\n      .catch((err) => {\n        alert(err.response.data.value)\n        this.props.pageLoadingSet(false);\n      });\n  }\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({search: value }, () => {\n      setTimeout(this.handleCheck, 20);\n    });\n  };\n  render() {\n    return (\n      <div className=\"Payments\">\n        <div className=\"align-items-center justify-content-between mt-4 mb-4\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <Link\n                className=\"primary-button d-inline-flex\"\n                to={authRoutes.createPatient.links[this.props.lang]}\n              >\n                Hasta Kaydı Oluştur\n              </Link>\n            </div>\n            <div className=\"col-md-6 d-flex justify-content-end\">\n              <InputWLabel\n                name=\"search\"\n                type=\"searchT\"\n                classes=\"mb-0 mw-300 w-100\"\n                id=\"search\"\n                value={this.state.search}\n                setValue={this.handleChange}\n                tabIndex={1}\n                label=\"\"\n                placeholder=\"Hasta Adı\"\n                searchHandle={() => {\n                  this.setState(\n                    {\n                      rows: [],\n                      currentpage: 1,\n                    },\n                    () => {\n                      this.getData();\n                    }\n                  );\n                }}\n                icon={\n                  <svg\n                    width=\"20\"\n                    height=\"20\"\n                    viewBox=\"0 0 20 20\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      d=\"M19.6672 18.1075L14.7625 13.1963C17.2288 9.98675 16.9826 5.34958 14.0229 2.41441C12.4065 0.796245 10.3234 0 8.21364 0C6.10387 0 4.02067 0.795147 2.40443 2.41441C-0.801477 5.62392 -0.801477 10.8364 2.40443 14.0459C4.02078 15.6641 6.10387 16.4603 8.21364 16.4603C9.96701 16.4603 11.7215 15.9116 13.1742 14.7864L18.1057 19.671C18.3251 19.8907 18.5991 20 18.8999 20C19.174 20 19.4758 19.8907 19.6942 19.671C20.1063 19.2595 20.1063 18.5458 19.6674 18.1075H19.6672ZM8.24028 14.2387C6.62393 14.2387 5.14344 13.6075 3.99278 12.4834C1.6635 10.1515 1.6635 6.33874 3.99278 3.97886C5.11675 2.85363 6.62393 2.22353 8.24028 2.22353C9.85663 2.22353 11.3371 2.85473 12.4878 3.97886C13.6385 5.1041 14.2412 6.61297 14.2412 8.23114C14.2412 9.84931 13.6107 11.3315 12.4878 12.4834C11.3638 13.6354 9.82989 14.2387 8.24028 14.2387Z\"\n                      fill=\"#474555\"\n                    />\n                  </svg>\n                }\n              />\n            </div>\n          </div>\n        </div>\n        <div>\n          <InfiniteScroll\n            dataLength={this.state.rows.length}\n            next={this.getData}\n            hasMore={this.state.hasMore}\n            loader={\n              <tr>\n                <td>Loading...</td>\n              </tr>\n            }\n            height={600}\n            endMessage={\n              <p style={{ textAlign: \"center\" }}>\n                {/*<b>Yay! You have seen it all</b>*/}\n              </p>\n            }\n          >\n            <div className=\"react-infinite-table react-infinite-table-fill example-table\">\n              <table className=\"table table-bordered table-striped\">\n                <thead>\n                  <tr>\n                    <th className=\"react-infinite-table-col-0\">Hasta Adı</th>\n                    <th className=\"react-infinite-table-col-1\">Fatura Tutarı</th>\n                    <th className=\"react-infinite-table-col-2\">Tahsil Edilmiş</th>\n                    <th className=\"react-infinite-table-col-4\"></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.rows.map((i, index) => (\n                    <tr key={index + \"a\"}>\n                      <td className=\"react-infinite-table-col-0\">\n                        <Link\n                          to={authRoutes.userDetail.links[this.props.lang].replace(\":id\", i.id)}\n                        >\n                          {i.fullName}\n                        </Link>\n                      </td>\n                      <td className=\"react-infinite-table-col-1\">\n                        <Link\n                          to={authRoutes.userDetail.links[this.props.lang].replace(\":id\", i.id)}\n                        >\n                          {i.paymentType === 0 ? formatMoney(i.price) + ' ' + i.currency : \"\"}\n                        </Link>\n                      </td>\n                      <td className=\"react-infinite-table-col-2\">\n                        <Link\n                          to={authRoutes.userDetail.links[this.props.lang].replace(\":id\", i.id)}\n                        >\n                          {i.paymentType === 10 ? formatMoney(i.amount) + ' ' + i.currency : \"\"}\n                        </Link>\n                      </td>\n                      <td className=\"react-infinite-table-col-4 text-right\">\n                        <Link\n                          className=\"primary-button md d-inline-flex\"\n                          to={authRoutes.getPaid.links[\n                            this.props.lang\n                          ].replace(\":id\", i.id)}\n                        >\n                          Ödeme Al\n                        </Link>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </InfiniteScroll>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Payments\n","/Users/erdincmaden/Documents/Other/monk-medical-web/src/utils/components/SelectWLabel.js",["150"],"import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport crypto from \"crypto\";\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport { validateInput } from \"../helper\";\n\nexport default class SelectWLabel extends Component {\n  state = {\n    isFilled: false,\n    isActive: false,\n  };\n\n  id = crypto.randomBytes(6).toString(\"hex\");\n\n  componentDidMount = () => {\n    if (this.props.value) this.setState({ isFilled: true }, this.handleFocus);\n  };\n\n  componentDidUpdate = (prevProps) => {\n    if (!prevProps.value && this.props.value && !this.state.isFilled)\n      this.setState({ isFilled: true }, this.handleFocus);\n  };\n\n  handleFocus = () =>\n    document.getElementById(`input-${this.id}`).classList.add(\"focused\");\n\n  handleBlur = (e) => {\n    if (this.props.validate)\n      if (!validateInput(this.props.type, e.target.value)) {\n        e.target.value = \"\";\n        this.props.setValue(e);\n      }\n\n    if (e.target.value === \"\" || e.target.value === \"empty-placeholder-value\")\n      document.getElementById(`input-${this.id}`).classList.remove(\"focused\");\n  };\n\n  render() {\n    return (\n      <div\n        className={`SelectWLabel position-relative d-flex justify-content-start align-items-center ${\n          this.props.classes ? this.props.classes : ``\n        } ${this.props.errorMessage !=='' ? 'error':''}`}\n        id={`input-${this.id}`}\n        data-move-label={this.state.isFilled || this.state.isActive}\n        data-w-icon={\"icon\" in this.props}\n        data-label={this.props.label}\n        data-error={Boolean(this.props.errorMessage)}\n        data-error-message={`* ${this.props.errorMessage}`}\n      >\n        {this.props.icon ? (\n          <div className=\"icon d-flex justify-content-center align-items-center\">\n            {this.props.icon}\n          </div>\n        ) : (\n          \"\"\n        )}\n        <Typeahead\n          id={this.props.id}\n          onChange={this.props.setValue}\n          options={this.props.options}\n          placeholder={this.props.placeholder}\n          selected={this.props.value}\n          value={this.props.value}\n        />\n        <label className='position-absolute'>{this.props.label}</label>\n      </div>\n    );\n  }\n}\n","/Users/erdincmaden/Documents/Other/monk-medical-web/src/UserDetail/UserDetail.js",["151","152"],"import React, { Component } from \"react\";\nimport { Dropdown } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport API, { headers } from \"../utils/API\";\nimport { headerTitleSet } from \"../App/appActions\";\nimport { formatMoney, scrollToTop } from \"../utils/helper\";\nimport editIcon from '../assets/images/edit-icon.svg';\nimport deleteIcon from '../assets/images/delete-icon.svg';\nimport { authRoutes } from \"../App/routes\";\n\nexport class UserDetail extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      name: '',\n      tckn: '',\n      passionNo: '',\n      phone: '',\n      email: '',\n      balance: '',\n      yapilanIslemler: [],\n      yapilanIslemlerToplam: 0,\n      islemGecmisi:[],\n      islemGecmisiToplam: 0,\n      hasMore1: false,\n      hasMore2: false, \n      length1: 10,\n      length2: 10,\n      currentpage1: 1,\n      currentpage2: 1,\n    }\n  }\n  componentDidMount = () => {\n    scrollToTop();\n\n    this.getData()\n  }\n  getData = ()=>{\n    if (\n      this.props.match.params.id !== \"\" &&\n      !_.isUndefined(this.props.match.params.id)\n    ) {\n      this.props.pageLoadingSet(true);\n\n      API.get(`Account/GetById?id=${this.props.match.params.id}`, {\n        headers: {\n          ...headers,\n          Authorization: `Bearer ${this.props.user.token}`,\n        },\n      })\n        .then((res) => {\n          const { user } = res.data;\n          this.setState({\n            name: user.fullName,\n            tckn: user.identityNumber,\n            passionNo: user.id,\n            phone: user.phoneNumber,\n            email: user.email,\n          });\n          this.props.pageLoadingSet(false);\n        })\n        .catch((err) => {\n          alert(err.response.data.value)\n          this.props.pageLoadingSet(false);\n        });\n\n      API.get(`Dashboard/Home?passionId=${this.props.match.params.id}`, {\n        headers: {\n          ...headers,\n          Authorization: `Bearer ${this.props.user.token}`,\n        },\n      })\n        .then((res) => {\n          const { creditTotal, debtTotal, list } = res.data;\n          const yapilanIslemler = [];\n          let yapilanIslemlerToplam = 0;\n          const islemGecmisi = [];\n          let islemGecmisiToplam = 0;\n          list.map((e) => {\n            if (e.paymentType === 0) {\n              islemGecmisi.push({\n                description: e.description,\n                price: e.price,\n                doctorId: e.doctorId,\n                userId: e.userId,\n                id: e.id,\n              });\n              islemGecmisiToplam = islemGecmisiToplam + e.price;\n            } else{\n              yapilanIslemler.push({\n                description: e.description,\n                price: e.price,\n                doctorId: e.doctorId,\n                userId: e.userId,\n                id: e.id,\n              });\n              yapilanIslemlerToplam = yapilanIslemlerToplam + e.price;\n            }\n          });\n          this.setState({\n            balance: debtTotal - creditTotal,\n            islemGecmisi,\n            islemGecmisiToplam,\n            yapilanIslemler,\n            yapilanIslemlerToplam,\n          });\n          this.props.pageLoadingSet(false);\n        })\n        .catch((err) => {\n          alert(err.response.data.value)\n          this.props.pageLoadingSet(false);\n        });\n    }\n  }\n\n  payDelete = (id) => {\n    this.props.pageLoadingSet(true);\n    API.delete(`Payment?paymentId=${id}`, {\n      headers: {\n        ...headers,\n        Authorization: `Bearer ${this.props.user.token}`,\n      },\n    })\n      .then((res) => {\n        this.getData()\n        this.props.pageLoadingSet(false);\n      })\n      .catch((err) => {\n        this.props.pageLoadingSet(false);\n      });\n  }\n    \n  render() {\n    return (\n      <div className=\"Payments\">\n        <div className=\"row pt-4\">\n          <div className=\"col-md-4 mb-4\">\n            <div className=\"border-radius border rounded\">\n              <div className=\"card-title\">Hasta Kartı</div>\n              <div className=\"card-body\">\n                <p>\n                  {this.state.name}\n                  <br />\n                  T.C. : {this.state.tckn}\n                </p>\n                <p>\n                  Hasta No:\n                  <br />\n                  {this.state.passionNo}\n                </p>\n                <p>\n                  Telefon:\n                  <br /> {this.state.phone}\n                </p>\n                <p>\n                  E-posta:\n                  <br />\n                  {this.state.email}\n                </p>\n                <div className=\"card-balance\">\n                  <p className=\"text-white p-0 m-0 font-weight-bold fs-16\">\n                    {formatMoney(this.state.balance) + ' TL'}\n                  </p>\n                  <span className=\"text-white fs-12\">Bakiye</span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-4 mb-4\">\n            <InfiniteScroll\n              dataLength={this.state.yapilanIslemler.length}\n              next={this.getData}\n              hasMore={this.state.hasMore1}\n              loader={\n                <tr>\n                  <td>Loading...</td>\n                </tr>\n              }\n              height={385}\n              endMessage={\n                <p style={{ textAlign: \"center\" }}>\n                  {/*<b>Yay! You have seen it all</b>*/}\n                </p>\n              }\n            >\n              <div className=\"react-infinite-table react-infinite-table-fill example-table\">\n                <table className=\"table table-bordered table-striped\">\n                  <thead>\n                    <tr>\n                      <th className=\"react-infinite-table-col-0\">\n                        Yapılan İşlemler\n                      </th>\n                      <th className=\"react-infinite-table-col-1 text-right\">\n                        Toplam : {formatMoney(this.state.yapilanIslemlerToplam)} TL\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.yapilanIslemler.map((i, index) => (\n                      <tr key={index + \"a\"}>\n                        <td className=\"react-infinite-table-col-0\">\n                          {i.description}\n                        </td>\n                        <td\n                          className=\"react-infinite-table-col-1\"\n                          align=\"right\"\n                        >\n                          {formatMoney(i.price)} TL\n                          <Dropdown className=\"float-right dropdown-min\">\n                            <Dropdown.Toggle></Dropdown.Toggle>\n                            <Dropdown.Menu>\n                              <Dropdown.Item\n                                onClick={() =>\n                                  this.props.history.push(\n                                    authRoutes.editPaid.links[this.props.lang]\n                                      .replace(\n                                        \":id\",\n                                        this.props.match.params.id\n                                      )\n                                      .replace(\":paid\", i.id)\n                                  )\n                                }\n                              >\n                                <img src={editIcon} alt=\"\" className=\"mr-2\" />{\" \"}\n                                Düzenle\n                              </Dropdown.Item>\n                              <Dropdown.Item\n                                onClick={() => {\n                                  this.payDelete(i.id);\n                                }}\n                              >\n                                <img src={deleteIcon} alt=\"\" className=\"mr-2\" />{\" \"}\n                                Sil\n                              </Dropdown.Item>\n                            </Dropdown.Menu>\n                          </Dropdown>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </InfiniteScroll>\n            <Link\n              className=\"primary-button d-inline-flex mt-3\"\n              to={authRoutes.getPaid.links[this.props.lang].replace(\n                \":id\",\n                this.props.match.params.id\n              )}\n            >\n              Tedavi Ekle\n            </Link>\n          </div>\n          <div className=\"col-md-4 mb-4\">\n            <InfiniteScroll\n              dataLength={this.state.islemGecmisi.length}\n              next={this.getData}\n              hasMore={this.state.hasMore2}\n              loader={\n                <tr>\n                  <td>Loading...</td>\n                </tr>\n              }\n              height={385}\n              endMessage={\n                <p style={{ textAlign: \"center\" }}>\n                  {/*<b>Yay! You have seen it all</b>*/}\n                </p>\n              }\n            >\n              <div className=\"react-infinite-table react-infinite-table-fill example-table\">\n                <table className=\"table table-bordered table-striped\">\n                  <thead>\n                    <tr>\n                      <th className=\"react-infinite-table-col-0\">\n                        İşlem Geçmisi\n                      </th>\n                      <th className=\"react-infinite-table-col-1 text-right\">\n                        Toplam : {formatMoney(this.state.islemGecmisiToplam)} TL\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.islemGecmisi.map((i, index) => (\n                      <tr key={index + \"a\"}>\n                        <td className=\"react-infinite-table-col-0\">\n                          {i.description}\n                        </td>\n                        <td\n                          className=\"react-infinite-table-col-1\"\n                          align=\"right\"\n                        >\n                          {formatMoney(i.price)} TL\n                          <Dropdown className=\"float-right dropdown-min\">\n                            <Dropdown.Toggle></Dropdown.Toggle>\n                            <Dropdown.Menu>\n                              <Dropdown.Item\n                                onClick={() =>\n                                  this.props.history.push(\n                                    authRoutes.editPaid.links[this.props.lang]\n                                      .replace(\n                                        \":id\",\n                                        this.props.match.params.id\n                                      )\n                                      .replace(\":paid\", i.id)\n                                  )\n                                }\n                              >\n                                <img src={editIcon} alt=\"\" className=\"mr-2\" />{\" \"}\n                                Düzenle\n                              </Dropdown.Item>\n                              <Dropdown.Item\n                                onClick={() => {\n                                  this.payDelete(i.id);\n                                }}\n                              >\n                                <img src={deleteIcon} alt=\"\" className=\"mr-2\" />{\" \"}\n                                Sil\n                              </Dropdown.Item>\n                            </Dropdown.Menu>\n                          </Dropdown>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </InfiniteScroll>\n            <Link\n              className=\"primary-button d-inline-flex mt-3\"\n              to={authRoutes.getPaid.links[this.props.lang].replace(\n                \":id\",\n                this.props.match.params.id\n              )}\n            >\n              Ödeme Al\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserDetail\n","/Users/erdincmaden/Documents/Other/monk-medical-web/src/CreatePatient/CreatePatient.js",[],"/Users/erdincmaden/Documents/Other/monk-medical-web/src/CreatePaid/CreatePaid.js",["153","154"],"import React, { Component } from \"react\";\nimport _ from 'lodash';\nimport moment from \"moment\";\nimport InputWLabel from \"../utils/components/InputWLabel\";\nimport SelectWLabel from \"../utils/components/SelectWLabel\";\nimport { formatMoney, scrollToTop } from \"../utils/helper\";\nimport API, { headers } from \"../utils/API\";\nimport { authRoutes } from \"../App/routes\";\nexport class CreatePaid extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      processList: [],\n      doctorList: [],\n      selectedProcess:[],\n      selectedDoctor:[],\n      total: '',\n      totalError: '',\n      selectedProcessError: '',\n      selectedDoctorError: '',\n      discountNumber:'',\n      discountResult: '',\n      alinanMiktar:'',\n      alinanMiktarView: false,\n      balance: 0,\n    }\n  }\n\n  componentDidMount = () => {\n    scrollToTop();\n    this.props.headerTitleSet(this.props.translate('payments'));\n    this.getData();\n  }\n\n  componentWillUnmount () {\n    clearTimeout(this._loadRowsTimeout)\n  }\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    \n    this.setState({ [name]: value }, () => {\n      if (name === 'discountNumber' || name === 'total') {\n        if (this.state.total !== \"\" || this.state.discountNumber !== \"\") {\n          this.setState({\n            discountResult:\n              Number(this.state.total) -\n              Number(this.state.total) *\n                Number(this.state.discountNumber / 100),\n          });\n        } else {\n          this.setState({\n            discountResult: \"\",\n          });\n        }\n      }\n    });\n  };\n  getData = ()=>{\n    API.get(`Process/List?length=1000`, {\n      headers: {\n        ...headers,\n        Authorization: `Bearer ${this.props.user.token}`,\n      },\n    }).then((res) => {\n      const processList = [];\n      res.data.data.map((e)=>{\n        processList.push({\n          id: e.id,\n          label: e.description,\n        })\n      })\n      this.setState({\n        processList\n      })\n      this.props.pageLoadingSet(false);\n    })\n    .catch((err) => {\n      alert(err.response.data.value)\n      this.props.pageLoadingSet(false);\n    });\n    API.get(`Account/ListAllDoctors?length=1000`, {\n      headers: {\n        ...headers,\n        Authorization: `Bearer ${this.props.user.token}`,\n      },\n    }).then((res) => {\n      const doctorList = [];\n      res.data.data.map((e)=>{\n        doctorList.push({\n          id: e.user.id,\n          label: e.user.fullName,\n        })\n      })\n      this.setState({\n        doctorList\n      })\n      this.props.pageLoadingSet(false);\n    })\n    .catch((err) => {\n      alert(err.response.data.value)\n      this.props.pageLoadingSet(false);\n    });\n    if (\n      this.props.match.params.id !== \"\" &&\n      !_.isUndefined(this.props.match.params.id)\n    ) {\n      this.props.pageLoadingSet(true);\n\n      API.get(`Account/GetById?id=${this.props.match.params.id}`, {\n        headers: {\n          ...headers,\n          Authorization: `Bearer ${this.props.user.token}`,\n        },\n      })\n        .then((res) => {\n          const { user } = res.data;\n          this.setState({\n            name: user.fullName,\n            tckn: user.identityNumber,\n            passionNo: user.id,\n            phone: user.phoneNumber,\n            email: user.email,\n          });\n          this.props.pageLoadingSet(false);\n        })\n        .catch((err) => {\n          alert(err.response.data.value)\n          this.props.pageLoadingSet(false);\n        });\n      API.get(`Dashboard/Home?passionId=${this.props.match.params.id}`, {\n        headers: {\n          ...headers,\n          Authorization: `Bearer ${this.props.user.token}`,\n        },\n      })\n        .then((res) => {\n          const { creditTotal, debtTotal } = res.data;\n          this.setState({\n            balance: debtTotal - creditTotal,\n          });\n          this.props.pageLoadingSet(false);\n        })\n        .catch((err) => {\n          this.props.pageLoadingSet(false);\n        });\n    }\n\n    if (\n      this.props.match.params.paid !== \"\" &&\n      !_.isUndefined(this.props.match.params.paid)\n    ) {\n      this.props.pageLoadingSet(true);\n\n      API.get(`Payment/GetById?id=${this.props.match.params.paid}`, {\n        headers: {\n          ...headers,\n          Authorization: `Bearer ${this.props.user.token}`,\n        },\n      })\n        .then((res) => {\n          this.setState({\n            total: res.data.price,\n            discountNumber:res.data.discountRate,\n            discountResult: Number(res.data.price) - (Number(res.data.price) * Number(res.data.discountRate/100)).toFixed(2),\n            alinanMiktar:res.data.amount,\n            alinanMiktarView:  false,\n            selectedProcess:[{id:1, label:'a1'}],\n            selectedDoctor:[{id:res.data.doctor.id, label:res.data.doctor.fullName}],\n          })\n          this.props.pageLoadingSet(false);\n        })\n        .catch((err) => {\n          this.props.pageLoadingSet(false);\n        });\n    }\n  }\n  postData = (q, r) =>{\n    const {total, discountNumber, selectedProcess, selectedDoctor, alinanMiktar} = this.state;\n    console.log(selectedProcess)\n    this.setState(\n      {\n        totalError: total === ''\n          ? \"Toplam fatura tutarını giriniz\"\n          : \"\",\n        selectedProcessError: selectedProcess.length === 0 ? \"Lütfen tedavi adını giriniz\" : '',\n        selectedDoctorError: selectedDoctor.length === 0 ? \"Lütfen doktor adını giriniz\" : '',\n      },\n      () => {\n        if (total === \"\" || selectedProcess === [] || selectedDoctor === []) {\n          console.log(total, discountNumber, selectedProcess, selectedDoctor);\n        } else {\n          const data = {\n            userId: this.props.match.params.id,\n            price: q === \"miktar\" ? parseFloat(alinanMiktar) : parseFloat(total),\n            discountRate: discountNumber === '' ? 0 : parseFloat(discountNumber),\n            createDate: moment().format(\"YYYY-MM-DD\"),\n            processId: parseInt(selectedProcess[0].id),\n            paymentType: q === \"miktar\" ? 10 : 0,\n            doctorId: selectedDoctor[0].id,\n          };\n\n          API.post(\"Payment\", data, {\n            headers: {\n              ...headers,\n              Authorization: `Bearer ${this.props.user.token}`,\n            },\n          })\n            .then((res) => {\n              if(r === 'next'){\n                this.setState({\n                  alinanMiktarView: true,\n                })\n              }\n              else{\n                this.props.history.push(\n                  authRoutes.payments.links[this.props.lang]\n                );\n              }\n            })\n            .catch((err) => {\n              this.props.pageLoadingSet(false);\n              this.setState({ isSending: false });\n            });\n        }\n      }\n    );\n  }\n  save = (redirect)=>{\n    this.postData('save', redirect);\n  }\n  saveAndFatura = ()=>{\n    this.postData('miktar', '');\n  }\n  render() {\n    return (\n      <div className=\"Payments\">\n        <div className=\"row  mt-5\">\n          <div className=\"col-md-4 mb-4\">\n            <div className=\"border-radius border rounded\">\n              <div className=\"card-title\">Hasta Kartı</div>\n              <div className=\"card-body\">\n                <p>\n                  {this.state.name}\n                  <br />\n                  T.C. : {this.state.tckn}\n                </p>\n                <p>\n                  Hasta No:\n                  <br />\n                  {this.state.passionNo}\n                </p>\n                <p>\n                  Telefon:\n                  <br /> {this.state.phone}\n                </p>\n                <p>\n                  E-posta:\n                  <br />\n                  {this.state.email}\n                </p>\n                <div className=\"card-balance mt-5\">\n                  <p className=\"text-white p-0 m-0 font-weight-bold fs-16\">\n                    {formatMoney(this.state.balance) + \" TL\"}\n                  </p>\n                  <span className=\"text-white fs-12\">Bakiye</span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-8 mb-4\">\n            {!this.state.alinanMiktarView && (\n              <div className=\"row\">\n                <div className=\"col-md-12\">\n                  <div className=\"row\">\n                    <div className=\"col-md-6 mt-2\">\n                      <div className=\"top-item select-box\">\n                        <SelectWLabel\n                          name=\"selectedProcess\"\n                          id=\"selectedProcess\"\n                          label=\"Tedavi\"\n                          value={this.state.selectedProcess}\n                          setValue={(selected) =>\n                            this.setState({ selectedProcess: selected })\n                          }\n                          placeholder=\"Tedavi Adı\"\n                          options={this.state.processList}\n                          errorMessage={this.state.selectedProcessError}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"col-md-6 mt-2\">\n                      <div className=\"top-item select-box\">\n                        <SelectWLabel\n                          name=\"selectedDoctor\"\n                          id=\"selectedDoctor\"\n                          label=\"Doktor\"\n                          setValue={(selected) => {\n                            this.setState({\n                              selectedDoctor: selected,\n                            });\n                          }}\n                          placeholder=\"Doktor\"\n                          options={this.state.doctorList}\n                          value={this.state.selectedDoctor}\n                          errorMessage={this.state.selectedDoctorError}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col-md-6 mt-2\">\n                      <InputWLabel\n                        type=\"text\"\n                        name=\"total\"\n                        id=\"total\"\n                        label=\"Toplam Fatura Tutarı\"\n                        placeholder=\"Toplam Fatura Tutarı\"\n                        value={this.state.total}\n                        setValue={this.handleChange}\n                        inputRef={this.totalRef}\n                        tabIndex={1}\n                        errorMessage={this.state.totalError}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col-md-6 mt-2\">\n                      <InputWLabel\n                        type=\"discount\"\n                        name=\"discountNumber\"\n                        id=\"discountNumber\"\n                        label=\"İndirim Oranı\"\n                        placeholder=\"İndirim Oranı\"\n                        value={this.state.discountNumber}\n                        setValue={this.handleChange}\n                        inputRef={this.discountNumberRef}\n                        tabIndex={1}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col-md-6 mt-2\">\n                      <InputWLabel\n                        type=\"text\"\n                        name=\"discountResult\"\n                        id=\"discountResult\"\n                        label=\"İndirimli Fatura Tutarı\"\n                        placeholder=\"İndirimli Fatura Tutarı\"\n                        value={this.state.discountResult}\n                        setValue={this.handleChange}\n                        inputRef={this.discountResultRef}\n                        tabIndex={1}\n                        disabled\n                      />\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col-md-12\">\n                      <button\n                        className=\"primary-button d-inline-flex\"\n                        onClick={() => this.save()}\n                      >\n                        Onayla\n                      </button>\n                      <button\n                        className=\"primary-white-button d-inline-flex ml-4\"\n                        onClick={() => this.save(\"next\")}\n                      >\n                        Onayla ve Miktar Ekle\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n            {this.state.alinanMiktarView && (\n              <div className=\"row\">\n                <div className=\"col-md-6 mt-2\">\n                  <InputWLabel\n                    type=\"text\"\n                    name=\"alinanMiktar\"\n                    id=\"alinanMiktar\"\n                    label=\"Alınan Miktar\"\n                    placeholder=\"Alınan Miktar\"\n                    value={this.state.alinanMiktar}\n                    setValue={this.handleChange}\n                    inputRef={this.alinanMiktarRef}\n                    tabIndex={1}\n                    errorMessage={this.state.errorMessage}\n                  />\n                </div>\n                <div className=\"col-md-12\">\n                  <button\n                    className=\"primary-button d-inline-flex\"\n                    onClick={() => this.saveAndFatura()}\n                  >\n                    Onayla\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CreatePaid\n","/Users/erdincmaden/Documents/Other/monk-medical-web/src/Expense/Expense.js",["155","156","157","158"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport _ from 'lodash'\nimport moment from \"moment\";\nimport API, { headers } from \"../utils/API\";\nimport { scrollToTop, currency, formatMoney } from \"../utils/helper\";\nimport InputWLabel from \"../utils/components/InputWLabel\";\nimport { authRoutes } from \"../App/routes\"\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nexport class Expense extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      rows: [],\n      hasMore: false, \n      length: 10,\n      currentpage: 1,\n      search: ''\n    }\n  }\n\n  \n  componentDidMount = () => {\n    scrollToTop();\n    this.props.headerTitleSet(this.props.translate('expenses'));\n    this.getData()\n  };\n\n  getData = ()=>{\n    API.get(`Expense/List?searchBy=${this.state.search}&page=${this.state.currentpage}`, {\n      headers: { ...headers, Authorization: `Bearer ${this.props.user.token}`, page: this.state.currentpage},\n    })\n      .then((res) => {\n        this.props.pageLoadingSet(false);\n        const { data } = res;\n        const rows = this.state.rows;\n        data.data.map(e => {\n          rows.push({\n            amount: e.amount,\n            clinicId: e.clinicId,\n            createDate: e.createDate,\n            currency: e.currency,\n            description: e.description,\n            id: e.id,\n          });\n        });\n        this.setState({\n          currentpage: this.state.currentpage+1,\n          rows: rows,\n          hasMore: data.totalPages >= this.state.currentpage+1\n        })\n\n      })\n      .catch((err) => {\n        this.props.pageLoadingSet(false);\n      });\n  }\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({search: value }, () => {\n      setTimeout(this.handleCheck, 20);\n    });\n  };\n  render() {\n    return (\n      <div className=\"Payments\">\n        <div className=\"align-items-center justify-content-between mt-4 mb-4\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <Link className=\"primary-button d-inline-flex\">\n                Yeni Gider Ekle\n              </Link>\n            </div>\n          </div>\n        </div>\n        <div>\n          <InfiniteScroll\n            dataLength={this.state.rows.length}\n            next={this.getData}\n            hasMore={this.state.hasMore}\n            loader={\n              <tr>\n                <td>Loading...</td>\n              </tr>\n            }\n            height={600}\n            endMessage={\n              <p style={{ textAlign: \"center\" }}>\n                {/*<b>Yay! You have seen it all</b>*/}\n              </p>\n            }\n          >\n            <div className=\"react-infinite-table react-infinite-table-fill example-table\">\n              <table className=\"table table-bordered table-striped\">\n                <thead>\n                  <tr>\n                    <th className=\"react-infinite-table-col-0\">Tarih</th>\n                    <th className=\"react-infinite-table-col-1\">Gider İsmi</th>\n                    <th className=\"react-infinite-table-col-2\">Tutar</th>\n                    <th className=\"react-infinite-table-col-4\"></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.rows.map((i, index) => (\n                    <tr key={index + \"a\"}>\n                      <td className=\"react-infinite-table-col-0 pt-3 pb-3\">\n                        {moment(i.createDate).format(\"LLL\")}\n                      </td>\n                      <td className=\"react-infinite-table-col-1 pt-2 pb-2\">\n                        {i.description}\n                      </td>\n                      <td className=\"react-infinite-table-col-2 pt-2 pb-2\">\n                        {formatMoney(i.amount) + \" \" + currency(i.currency)}\n                      </td>\n                      <td className=\"react-infinite-table-col-4 text-right pt-2 pb-2\">\n                        <Link\n                          className=\"d-inline-flex align-items-center text-blue pl-3 pr-3\"\n                          to={authRoutes.getPaid.links[this.props.lang].replace(\n                            \":id\",\n                            i.id\n                          )}\n                        >\n                          Düzenle\n                        </Link>\n                        <Link\n                          className=\"d-inline-flex align-items-center text-pink pl-3 pr-3\"\n                          to={authRoutes.getPaid.links[this.props.lang].replace(\n                            \":id\",\n                            i.id\n                          )}\n                        >\n                          Sil\n                        </Link>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </InfiniteScroll>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Expense\n",{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","severity":1,"message":"164","line":9,"column":8,"nodeType":"165","messageId":"166","endLine":9,"endColumn":26},{"ruleId":"163","severity":1,"message":"167","line":13,"column":8,"nodeType":"165","messageId":"166","endLine":13,"endColumn":33},{"ruleId":"163","severity":1,"message":"168","line":15,"column":8,"nodeType":"165","messageId":"166","endLine":15,"endColumn":33},{"ruleId":"163","severity":1,"message":"169","line":17,"column":8,"nodeType":"165","messageId":"166","endLine":17,"endColumn":24},{"ruleId":"163","severity":1,"message":"170","line":1,"column":10,"nodeType":"165","messageId":"166","endLine":1,"endColumn":15},{"ruleId":"163","severity":1,"message":"171","line":14,"column":7,"nodeType":"165","messageId":"166","endLine":14,"endColumn":16},{"ruleId":"172","severity":1,"message":"173","line":156,"column":19,"nodeType":"174","endLine":162,"endColumn":20},{"ruleId":"172","severity":1,"message":"173","line":165,"column":19,"nodeType":"174","endLine":171,"endColumn":20},{"ruleId":"172","severity":1,"message":"173","line":174,"column":19,"nodeType":"174","endLine":180,"endColumn":20},{"ruleId":"163","severity":1,"message":"175","line":3,"column":8,"nodeType":"165","messageId":"166","endLine":3,"endColumn":9},{"ruleId":"176","severity":1,"message":"177","line":37,"column":25,"nodeType":"178","messageId":"179","endLine":37,"endColumn":27},{"ruleId":"163","severity":1,"message":"180","line":62,"column":13,"nodeType":"165","messageId":"166","endLine":62,"endColumn":17},{"ruleId":"163","severity":1,"message":"181","line":2,"column":8,"nodeType":"165","messageId":"166","endLine":2,"endColumn":17},{"ruleId":"163","severity":1,"message":"182","line":7,"column":10,"nodeType":"165","messageId":"166","endLine":7,"endColumn":24},{"ruleId":"176","severity":1,"message":"177","line":81,"column":24,"nodeType":"178","messageId":"179","endLine":81,"endColumn":26},{"ruleId":"176","severity":1,"message":"177","line":66,"column":28,"nodeType":"178","messageId":"179","endLine":66,"endColumn":30},{"ruleId":"176","severity":1,"message":"177","line":88,"column":28,"nodeType":"178","messageId":"179","endLine":88,"endColumn":30},{"ruleId":"163","severity":1,"message":"175","line":3,"column":8,"nodeType":"165","messageId":"166","endLine":3,"endColumn":9},{"ruleId":"163","severity":1,"message":"183","line":7,"column":8,"nodeType":"165","messageId":"166","endLine":7,"endColumn":19},{"ruleId":"176","severity":1,"message":"177","line":38,"column":25,"nodeType":"178","messageId":"179","endLine":38,"endColumn":27},{"ruleId":"163","severity":1,"message":"180","line":60,"column":13,"nodeType":"165","messageId":"166","endLine":60,"endColumn":17},"no-native-reassign",["184"],"no-negated-in-lhs",["185"],"no-unused-vars","'analysesMenuActive' is defined but never used.","Identifier","unusedVar","'doctor_settingsMenuActive' is defined but never used.","'system_settingsMenuActive' is defined but never used.","'clinicMenuActive' is defined but never used.","'alert' is defined but never used.","'allRoutes' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'_' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'name' is assigned a value but never used.","'PropTypes' is defined but never used.","'headerTitleSet' is defined but never used.","'InputWLabel' is defined but never used.","no-global-assign","no-unsafe-negation"]